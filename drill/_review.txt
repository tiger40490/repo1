温故而知新 .. I tend to find bugs + neglected/forgotten parts + areas of improvement. Each part of a given solution can be a show stopper or derailer in a real coding test

====knapsack.py 
DP blaster
====isPalindrome #FB
impl is horrible
====continuousSentence: 
memoization for my recursive-in-loop?

Each position in the input string is a node. Directional arrows link the nodes. We need to find-all-paths from first node to last node.

To build the graph, we generate all the outgoing arrows at each reachable node, starting from the first node.

For the find-any-path problem, what's the simpler, elegant solution?

====find all paths in a directional graph, from Start node to End node
vanila DFS is optimal?

recursive-in-loop is also viable?

Can check out my algorithm book

====(cpp) max submatrix using histogram algo
thick->thin? not yet. 
====edit distance
DP blaster
====regex? too hard?
====combo-sum vs knapsack
====It's relatively easy n enjoyable to review some of the classicGenerators problems. 

~~~~~~~~~~~~~~~ c++lang features
====my fixed-size fmalloc
====oq in shPtrDowncast
====my rvr experiments
====my enable_if_t experiments
====static | inline free func definition is exempted from ODR?
====semi-smart pointer in safeC++ ? See impl.txt