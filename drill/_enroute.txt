[c=classic]
[e=ez]
[L=leetcode]
[o=original, not discussed widely]
[v=easy to verify]

====[o]Q: maximize sum+dist. Given an array of signed ints. The score of any pair is their sum + their distance(i.e. subscript diff). Find the best pair.

I will call the best pair "left winner" and "right winner"

O(NN) is simple but I think we can achieve O(N)

How about two-pointers moving in?
How about two-pointers moving forward?

99 88 3 2 3 5 7 5 9< 4 2
88 99 2 3 5 1 6 3 6 0 1 2 3 
3 2 1 5 3 2 9 3 1 0 2 6 3 2
1 0 2 8 6 3 1 7 5 1 4

What if the first elements are 11,12,13,14? They are equally good as the left winner or they all lose to another item on the right
====topo sort: given a directed graph, any linear algo to assign ranks?
I prefer to use one rank for multiple nodes that can be simultaneously started/concretized/evaluated. This feature can increase flexibility and parallelism

rank table -- We can use a hashtable (or pre-sized vector) to store the ranks: {rank -> list of nodes of that rank}. Assigning a node means adding the node id to the correct list, in O(1)

Assumption 1: the original graph nodes contain precedents but no dependents. spreadsheet-model. I think this is Kahn's assumption.

Assumption 2: the original graph nodes contain dependents but no precedents. notification list or "call list", or "listener list"

In most situations, One of these two assumptions would hold, but rarely both.

Scan-1 O(V+E) -- build a hashtable-based two-way edgeSet representation of the graph. For each node, we maintain a hashset (or slist) of precedents and a hashset of dependents. The duplication is needed, as described below in the Kahn context. 

Scan-2 O(V) -- assign rank 0 to all top-level nodes (no precedent). Now we can use the rank table to scan rank-0 nodes

Scan-3 -- Now scan the last assigned rank, rank-0 in this case. 
For each node in that list, check each downstream child. 
Unconditionally remove (O(1) thanks to hashset) the precedent from inside the child. 
After that, If the child has empty hashset of precedents it is assigned rank 1. 
I now believe the precedent/dependent link is never accessed again, so we can remove both.

Repeat the last scan at Rank 1, then Rank 2..

Every node is assigned only once. Every edge is checked only once or twice.

Can the precedents hashset become an integer count?

-- simplicity
In this design, I use multiple Simple passes and avoid doing too much in one pass. If needed, you can combine Scan-2 and Scan-1.

We treat the original nodes as readonly -- nice simplification.
--terminology: 
precedent/dependent is accurate but abstract.
"Dependency" is a confusing term. It means someone I depend on. Better avoid this word in graph problems.
uplink/downlink is visual only in a tree with root on top

--Kahn uses "incoming edge" to mean a precedent
"All nodes with no incoming edge" ... implies a node object has this->precedents field

When he visits downstream nodes from "current node", he needs this->dependents field

This crucial detail is not explained in wikipedia
====Q[c e v] implement half-written abbr_iterative.h based on the abbr_ascendRecursive.h
Not so easy when the word contains dupe letters. I think hashtable is simplest solution in a realistic context, as explained in cookbook.py
