[c=classic]
[e=ez]
[cc=careercup]
[L=leetcode]
[o=original, not discussed widely]
[v=easy to verify]

====Q (50%): isSymetric(root of a binary tree)
assumption: node count unknown. Even if it's known, the info won't help bigO

dft won't work?
in-order ?
Any simpler algo?
How do I know if two nodes are the pair? Must check path-from-root? 

--idea 1: BFT to list all nodes with level. 
For each node, record the path-from-root as a list. As a lighter alternative to this "list", the path can degenerate to the last step, as a le/ri flag.

Now scan each level from both ends. The left item's path should mirror the right item's path.

(Before the scan. confirm the node count is even.)

====Q: Given a list of loans {lenderId, borrowerId, amt}, write a repay(loans) to produce the minimum set of repayments.

Eg: {B>A,$3} {A>C,$1} {C>B,$2} means A received $2, B lent $1, C lent $1.

Each person gets an account with a final balance. Some (say 22) balances are positive, while the rest (say 11) negative. 

To really clean up, it's good to identify disjoint groups of persons. Within each group, settle.

====Q from p 183  [[discrete math]]: given a n x n grid. Start from south west corner moving north or east each step, towards that corner. The diagonal connecting them can be touched but not crossed. Generate all paths

Grid traversal.

DFT will require deep recursion. 

BFT (with color)
====Q (classic DP problem, not contrived): optimal bst: 
Given a set of sorted search keys and their hit probabilities, construct the BST with lowest search cost. 
we know the probabilities add up to 100%. 
There are many ways to construct a BST (I solved that problem, shared by Rahul), but the search cost is different, defined as

sum of {depth of key_i * probability of key_i}

Can we put the busiest key as root? But what if it is the first/last key?

====[o]Q: maximize sum+dist. Given an array of signed ints. The score of any pair is their sum + their distance(i.e. subscript diff). Find the best pair.
I will call the best pair "left winner" and "right winner"

----
I don't know where this problem comes from. Don't know where to search for solution..Good.. but then i found https://stackoverflow.com/questions/32067492/maximize-sum-distance-for-integer-array is the same problem.

int-array problem is my relative weakness. O(NN) is simple but I think we can achieve O(N) with multiple scans.

How about two-pointers moving in?
How about two-pointers moving forward?

99 88 3 2 3 5 7 5 9< 4 2
88 99 2 3 5 1 6 3 6 0 1 2 3 
3 2 1 5 3 2 9 3 1 0 2 6 3 2
1 0 2 8 6 3 1 7 5 1 4

What if the first elements are 11,12,13,14? They are equally good as the left winner or they all lose to another item on the right
====Q: max distance: Given an array A of integers, find the maximum of j - i subjected to the constraint of A[i] <= A[j].
Example:
Input A: [3, 5, 4, 2]
Output: 2 for the pair (3, 4)

Another int-array problem -- my weakness. O(NN) is trivial. Can you beat that?
====topo sort: given a directed graph, any linear algo to assign ranks?
I prefer to use one rank for multiple nodes that can be simultaneously started/concretized/evaluated. This feature can increase flexibility and parallelism

rank table -- We can use a hashtable (or pre-sized vector) to store the ranks: {rank -> list of nodes of that rank}. Assigning a node means adding the node id to the correct list, in O(1)

Assumption 1: the original graph nodes contain precedents but no dependents. spreadsheet-model. I think this is Kahn's assumption.

Assumption 2: the original graph nodes contain dependents but no precedents. notification list or "call list", or "listener list"

In most situations, One of these two assumptions would hold, but rarely both.

Scan-1 O(V+E) -- build a hashtable-based two-way edgeSet representation of the graph. For each node, we maintain a hashset (or slist) of precedents and a hashset of dependents. The duplication is needed, as described below in the Kahn context. 

Scan-2 O(V) -- assign rank 0 to all top-level nodes (no precedent). Now we can use the rank table to scan rank-0 nodes

Scan-3 -- Now scan the last assigned rank, rank-0 in this case. 
For each node in that list, check each downstream child. 
Unconditionally remove (O(1) thanks to hashset) the precedent from inside the child. 
After that, If the child has empty hashset of precedents it is assigned rank 1. 
I now believe the precedent/dependent link is never accessed again, so we can remove both.

Repeat the last scan at Rank 1, then Rank 2..

Every node is assigned only once. Every edge is checked only once or twice.

Can the precedents hashset become an integer count?

-- simplicity
In this design, I use multiple Simple passes and avoid doing too much in one pass. If needed, you can combine Scan-2 and Scan-1.

We treat the original nodes as readonly -- nice simplification.
--terminology: 
precedent/dependent is accurate but abstract.
"Dependency" is a confusing term. It means someone I depend on. Better avoid this word in graph problems.
uplink/downlink is visual only in a tree with root on top

--Kahn uses "incoming edge" to mean a precedent
"All nodes with no incoming edge" ... implies a node object has this->precedents field

When he visits downstream nodes from "current node", he needs this->dependents field

This crucial detail is not explained in wikipedia
====Q[c e v] implement half-written abbr_iterative.h based on the abbr_ascendRecursive.h
Not so easy when the word contains dupe letters. I think hashtable is simplest solution in a realistic context, as explained in cookbook.py
