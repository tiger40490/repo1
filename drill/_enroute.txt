[c=classic]
[e=ez]
[L=leetcode]
[v=easy to verify]
 
====Q [c DP] LCS: longest common subsequence (not sub-string) between two strings X and Y
classic DP problem.

Let's suppose there are 10 chars in X, 10 in Y
abcbcfgbac = Y
acebgfacbc = X

--top-down algo
Treat X as haystack and search for Y[0]. If found at X[3], then recursively call f(X[4:], Y[1:]). After this function returns or if not found, iterate to Y[1]. This loop only looks for Y[0] in X.

Then treat Y as haystack

--bottom-up approach is not even half done:
lcs(X[0:1], Y) left-most match in Y .. returns the lowest index in Y to accommodate the shorter string, or -1 for failure
.. can be easily completed
lcs(Y[0:1], X) can be easily completed
lcs(X[0:2], Y): given the lcs(X[0:1], Y) answer, we scan (Y) forward from there 

====Q [c DP] knapsack problem: we are given a set of n items, where each item i is specified by a size s[i] and a value v[i]. We are also given a size bound S (the size of our knapsack). The optimization goal is to find the subset of items of maximum total value such that sum of their sizes is at most S (they all fit into the knapsack)

classic DP problem.

f(remainingItems, remainingCapacity) is the basic function to write.

I would want to sort the items by "density" of gold, so i always take the densest item unless it doesn't fit

====Q [c str] longest palindrome subarray
DP problem
Is there an O(N) solution? Manacher's algorithm, but most solutions out there are O(NN)

I have written a non-DP solution
====Q [c str] longest palindrome subsequence (not subarray)
if there's an elegant idea then I should try then read it. 

Syntax should be light.
I think some non-optimal solution is feasible. start with some good (extreme) examples
eg alabama -> aabaa
eg mississippi -> ississi
eg philippines -> pilip

To keep things simple just assume there are only 26 chars

Can we safely remove some char to reduce the problem to a smaller problem?

--solution 1 (not so good): classic generator for all abbr and check each but at some point we may have enough confidence to terminate the search

====Q[c e v] implement half-written abbr_iterative.h based on the abbr_ascendRecursive.h
Not so easy when the word is not sorted and contains dupe letters. I think hashtable is needed

====Q [c !e] next split@N boys
