[c=classic]
[e=ez]
[L=leetcode]
[v=easy to verify]
 
====Q [c DP] given the first N natural numbers, how many BST can you form?
how do you make use of the previous results for N=2 to tackle N=3?
N=2: ans=2
N=3: need to draw them to see patterns

====Q [c str] longest palindrome subsequence (not subarray)
Any DP solution?
if there's an elegant idea then I should try then read it. 

Syntax should be light.
I think some non-optimal solution is feasible. start with some good (extreme) examples
eg alabama -> aabaa
eg mississippi -> ississi
eg philippines -> pilip

To keep things simple just assume there are only 26 chars

Can we safely remove some char to reduce the problem to a smaller problem?

--one-scan algo:
maintain all the growers as we scan forward. For a new char , attempt to grow some growers.
Each grower keeps an hashtable (or array) or unused chars to the left. Each entry is {unused char -> sorted stack of positions}

Once a grower is recognized, it never gets disqualified

If this works it is again using auxDS, my strength
--solution 1 (not so good): classic generator for all abbr and check each but at some point we may have enough confidence to terminate the search

2^N abbr, so a lot of strings to test

====Q[c e v] implement half-written abbr_iterative.h based on the abbr_ascendRecursive.h
Not so easy when the word contains dupe letters. I think hashtable is simplest solution in a realistic context, as explained in cookbook.py

