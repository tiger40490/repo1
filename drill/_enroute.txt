[c=classic]
[e=ez]
[L=leetcode]
[v=easy to verify]
 
====union-find problems
====Q [L127] word ladder
Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

* Only one letter can be changed at a time.
* Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
* Return 0 if there is no such transformation sequence.
* All words have the same length.
* All words contain only lowercase alphabetic characters.
* You may assume no duplicates in the word list.
Example 1:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Example 2:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
Output: 0

--analysis: 
First scan O(NN)to build the graph. Given an existing graph of N words (N can be 1), a new word is compared to each to construct the edge list.

2nd scan O(N+E) BFT

====Q [c DP] given the first N natural numbers, how many BST can you form?
how do you make use of the previous results for N=2 to tackle N=3?
N=2: ans=2
N=3: need to draw them to see patterns

====Q [c str] longest palindrome subsequence (not subarray)
if there's an elegant idea then I should try then read it. 

To keep things simple just assume there are only 3 unique chars

Can we safely remove some char to reduce the problem to a smaller problem?

--DP idea
as we increment a forward marker, we keep all growers.

Each grower keeps a hashtable (or array) of unused chars on its left. Each entry is {unused char -> sorted stack of positions}

As we increment the iterator, we first grow the leading pack of longest growers. In fact, I might pick one grower only [1]. IIF all of them stop growing, then we look at the next pack of next-longest prowers.

[1] I pick the lowest Member.ri value

grower is kinda immutable. Always clones itself before it grows.

If this works it is again using auxDS, my strength

====Q[c e v] implement half-written abbr_iterative.h based on the abbr_ascendRecursive.h
Not so easy when the word contains dupe letters. I think hashtable is simplest solution in a realistic context, as explained in cookbook.py
