[c=classic]
[e=ez]
[L=leetcode]
[v=easy to verify]
 
====Q [c DP] given the first N natural numbers, how many BST can you form?
how do you make use of the previous results for N=2 to tackle N=3?
N=2: ans=2
N=3: need to draw them to see patterns
====Q [c str] longest palindrome subarray
A G100, not G50 classic. There's a sub-optimal DP solution. 
Is there an O(N) solution? Manacher's algorithm, but most solutions out there are O(NN)

I have written a non-DP solution

--new idea:
at each position, try to maintain all the growing palindromes in a "alive/grower" queue (or slist).

With this data structure, when the longest alive ends at position 5, we immediately have a new longest alive. At a minimum, the position 5 itself is alive

Each entry in the "grower" data structure is an int representing the left end position of a grower

What if i get a run of 3 Xs? Then keep that many growers in the data structure?

Updating the data structure at a new position? check each grower and remove any dead

--new idea:
O(N) scan to identity all the "runs". Save each in a struct{char, start, end}
O(N) scan to identify all the ABA clusters. Save each in a struct(charMid, charSide, MidPos)
It's possible for two identical runs to be actually part of a palindrome. If we can identify such a pattern then we would want to locate the center n start scanning therefrom
====Q [c str] longest palindrome subsequence (not subarray)
Any DP solution?
if there's an elegant idea then I should try then read it. 

Syntax should be light.
I think some non-optimal solution is feasible. start with some good (extreme) examples
eg alabama -> aabaa
eg mississippi -> ississi
eg philippines -> pilip

To keep things simple just assume there are only 26 chars

Can we safely remove some char to reduce the problem to a smaller problem?

--solution 1 (not so good): classic generator for all abbr and check each but at some point we may have enough confidence to terminate the search

====Q[c e v] implement half-written abbr_iterative.h based on the abbr_ascendRecursive.h
Not so easy when the word contains dupe letters. I think hashtable is simplest solution in a realistic context, as explained in cookbook.py

