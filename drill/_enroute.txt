[c=classic]
[e=ez]
[L=leetcode]
[v=easy to verify]

The problems I'm interested in might be harder than required? I think some financial firms don't use tough speed coding. Instead, they focus on
* language features
* pure algo
* simple speed-coding problems
 
====Q [c DP] given the first N natural numbers, how many BST can you form?

====Q [c DP] LCS: longest common subsequence (not sub-string) between two strings X and Y
classic DP problem.

Let's suppose there are 10 chars in X, 10 in Y
abcbcfgbac = Y
acebgfacbc = X

--bottom-up approach is not even half done:
lcs(X[3:], Y[7:]) is max (
lcs(X[4:], Y[7:]),
lcs(X[3:], Y[8:])) if X[3] != Y[7]. Otherwise, we should also compare 
lcs([X4:], Y[8:])+1

Should use a pair of black/white string to test

====Q [c str] longest palindrome subarray
DP problem
Is there an O(N) solution? Manacher's algorithm, but most solutions out there are O(NN)

I have written a non-DP solution
====Q [c str] longest palindrome subsequence (not subarray)
if there's an elegant idea then I should try then read it. 

Syntax should be light.
I think some non-optimal solution is feasible. start with some good (extreme) examples
eg alabama -> aabaa
eg mississippi -> ississi
eg philippines -> pilip

To keep things simple just assume there are only 26 chars

Can we safely remove some char to reduce the problem to a smaller problem?

--solution 1 (not so good): classic generator for all abbr and check each but at some point we may have enough confidence to terminate the search

====Q[c e v] implement half-written abbr_iterative.h based on the abbr_ascendRecursive.h
Not so easy when the word contains dupe letters. I think hashtable is simplest solution in a realistic context, as explained in cookbook.py

