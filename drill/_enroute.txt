[c=classic]
[e=ez]
[L=leetcode]
[v=easy to verify]
 
====Q [c DP] LCS: longest common subsequence (not sub-string) between two strings X and Y
classic DP problem.

Let's suppose there are 10 chars in X, 10 in Y
abcbcfgbac = Y
acebgfacbc = X

--bottom-up approach is not even half done:
lcs(X[3:], Y[7:]) is max (
lcs(X[4:], Y[7:]),
lcs(X[3:], Y[8:])) if X[3] != Y[7]. Otherwise, we should also compare 
lcs([X4:], Y[8:])+1

Should use a pair of black/white string to test
====Q [c DP] knapsack problem: we are given a set of n items, where each item i is specified by a size s[i] and a value v[i]. We are also given a size bound S (the size of our knapsack). The optimization goal is to find the subset of items of maximum total value such that sum of their sizes is at most S (they all fit into the knapsack)

classic DP problem.

f(remainingItems, remainingCapacity) is the basic function to write.

I would want to sort the items by "density" of gold, so i always take the densest item unless it doesn't fit

====Q [c str] longest palindrome subarray
DP problem
Is there an O(N) solution? Manacher's algorithm, but most solutions out there are O(NN)

I have written a non-DP solution
====Q [c str] longest palindrome subsequence (not subarray)
if there's an elegant idea then I should try then read it. 

Syntax should be light.
I think some non-optimal solution is feasible. start with some good (extreme) examples
eg alabama -> aabaa
eg mississippi -> ississi
eg philippines -> pilip

To keep things simple just assume there are only 26 chars

Can we safely remove some char to reduce the problem to a smaller problem?

--solution 1 (not so good): classic generator for all abbr and check each but at some point we may have enough confidence to terminate the search

====Q[Lv] 80%: classic generator algo: Leetcode problem 17... Given a string containing digits from 2-9 inclusive, return all possible letter combinations (not permutations) that the number could represent.

yield-generator can help. Is this the "redraw" algo?
input "88" we have 6 combos? tt tu tv uu uv vv
input "888" we have 8 combos? ttt ttu ttv tuu tuv uuu uuv vvv

2: abc
3: def
4: ghi
5: jkl
6: mno
7: pqrs
8: tuv
9: wxyz

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]. 

--we need good variable names. 
For the 9 digits, every digit is immediately mapped to a name string like '2' -> "er" and I hope not to use the digits any more.
Java would use enum

To minimize confusion, Create typedef LOB as alias for either vector<char> or the string form. Will have 8 const LOB instances. Java would use enum

struct Bundle{
  set<vector<char>> clubOfWords; 
  size_t repeatOfThisButton;
  LOB lob; //compile-time constant
};
--
The utility function would be
Bundle gen(vector<char> const & lob /*lettersOnOneButton*/ , int repeat). This function is fairly simple. for er_5, we have 3^5 possible words in the club

sort input into 222223444 then create map: 
"er_5" -> a bundle
"san1" -> a bundle
"si_3" -> a bundle

A major Miletone is when the map is populated with the clubs. Now generate combos ... better use "append" approach.

====Q[c e v] implement half-written abbr_iterative.h based on the abbr_ascendRecursive.h
Not so easy when the word is not sorted and contains dupe letters. I think hashtable is needed

====Q [c !e] next split@N boys
