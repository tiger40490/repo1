
====Q (classic DP problem, not contrived): optimal bst: 
Given a set of sorted search keys and their hit probabilities, construct the BST with lowest search cost. 
we know the probabilities add up to 100%. 
There are many ways to construct a BST (I solved that problem, shared by Rahul), but the search cost is different, defined as

sum of {depth of key_i * probability of key_i}

Can we put the busiest key as root? But what if it is the first/last key?

More of a math problem than algo problem.

what's a tail problem? Only two nodes with their hit probabilities. Put the hotter node on top (downward tree)

How about three nodes (A B C)? There's a breakeven point 
If middle node is slightly cold then it should be root.

Pa+Pc   vs   2Pa+Pb # C being hottest
Pc      vs    Pa+Pb # wins iFF C too hot