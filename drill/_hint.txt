==Q: detect cycle in bintree

==Q[L]: max profit with up to 2 buy-sell pairs
====Q:  max path sum
https://bintanvictor.wordpress.com/wp-admin/post.php?post=23360&action=edit has my solution but perhaps there are better solutions

====[L]Q: friend circle
https://bintanvictor.wordpress.com/wp-admin/post.php?post=29875&action=edit

====Q (60%): isSymetric(root of a binary tree). solved it iteratively and recursively.

assumption: node count unknown. (Even if it's known, the info won't help bigO.)

dft won't work?
in-order ?
Any simpler algo?
How do I know if two nodes are the pair? Must check path-from-root? 

--idea 1: BFT to list all nodes with level. 
For each node's enqueue() (including the null nodes), record the path-from-root as a list. As a lighter alternative to this "list", the path can degenerate to the last step, as a le/ri flag.

Now scan each level from both ends. The left item's path should mirror the right item's path.

(Before the scan. confirm the node count is even.)

--dft
first scan records the paths to each leaf node. (Optionally, each path can includes east/west directions).
2nd scan does the same but always visits right child first.

The two outputs should match