====Q[c L]: sort a list in O(N logN) but constant space? 
I think swap is way to go, but recursion stack space? iterative?

--O(1) space solution
Get a quick estimate of the median. 
Then move two pointers from far ends towards center.
Whenever med < left item,  freeze left ptr.
Whenever right item < med, freeze right ptr.
when both pointers stopped, swap them, then unfreeze both.

Now list is partitioned into two halves. Now divide and conquer. Total logN scans.

--O[N] space (not O[1]) idea
merge sort using an aux array of same size
1) divide the array into 2^j segments each up to 2 elements, rembering the (segment) boundaries.
2) sort each segment
3) merge first 2 segments and output to a new array of N but only use the first few slots
4) similarly , merge 3rd and 4th segments into the new array, using the next few slots
Once we merge all pairs, entire new array is populated and old array can be reset to 0 and usable as a blank array
Now the segment boundaries are updated and reduced by half. When segment count becomes 2, we would be on the last merge.
5) repeat Step 3

In total we visit each of N nodes logN times

====Q (classic DP problem, not contrived): optimal bst: 
Given a set of sorted search keys and their hit probabilities, construct the BST with lowest search cost. 
we know the probabilities add up to 100%. 
There are many ways to construct a BST (I solved that problem, shared by Rahul), but the search cost is different, defined as

sum of {depth of key_i * probability of key_i}

Can we put the busiest key as root? But what if it is the first/last key?

