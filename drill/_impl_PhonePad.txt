====Q[Lv] 80%: classic generator algo: Leetcode problem 17... Given a string containing digits from 2-9 inclusive, return all possible letter combinations (not permutations) that the number could represent.

2: abc
3: def
4: ghi
5: jkl
6: mno
7: pqrs
8: tuv
9: wxyz

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]. 

Output need not be sorted but I would aim to print each word as sorted and also print all words in ascending order

-----
Group all the er's into bag2, then all the qi's into bag7... Generate the strings for each bag independently. After that, problem becomes 

Q2: given N (say 11) Sets of unique strings, pick one from each set and concate the N strings as one output. Generate all output. I feel this can't use the cookbook recipe since input is not one "pool" string but n sets. I think iterative is fine. 

idea: Loop variable to keep the N indices (iterators) into each set
idea (dp + yield): generate the output for N=2. save to a collection. then take in next Set.

--yield-generator redrawC() generates ... 
input "88" we have 6 combos? tt tu tv uu uv vv
input "888" we have 10 combos? ttt ttu ttv tuu tuv tvv uuu uuv uvv vvv

--we need good variable names. 
For the 9 digits, every digit is immediately mapped to a name string like '2' -> "er" and I hope not to use the digits any more.
Java would use enum

To minimize confusion, Create typedef LOB as alias for either vector<char> or the string form. Will have 8 const LOB instances. Java would use enum

struct Bundle{
  set<vector<char>> clubOfWords; 
  size_t repeatOfThisButton;
  LOB lob; //compile-time constant
};
--
The utility function would be
Bundle gen(vector<char> const & lob /*lettersOnOneButton*/ , int repeat). This function is fairly simple. for er_5, we have 3^5 possible words in the club

sort input into 222223444 then create map: 
"er_5" -> a bundle
"san1" -> a bundle
"si_3" -> a bundle

A major Miletone is when the map is populated with the clubs. Now generate combos ... better use "append" approach.
