
-- update bpost on ... c++weaknessRevealedByJIV
The low-level features are designed to influence, not directly manipulate, the low-level operations. This is similar to how a race driver "controls" the vehicle over a sharp turn.

In this context, there is an essential body of system knowledge (Scott Meyers?) about crash analsysis, linker/compiler, template instantiation, internals of static/shared lib files, kernel interaction. My main focus is "instrumentation" meaning visibility of the nitty-gritty under the hood.

In most projects and Prod issues, we don't need a lot of system knowledge, beyond our source code + some log message + visible signs above the "sea-surface".

-- new or fuxi
Tag 100 is for execution
tag 207 is assisting #55 and #22, to help identify the security

-- new: FIX 4.2^4.4 #%%notes
A predictable JIV question. My answers:

35=AB (and 35=AC) introduced in 4.3
150=F introduced in 4.3
MatrityDate<541> introduced in 4.3
167=FUT or 167=OPT deprecated in 4.3 (see CFICode<461>) though many brokers still support them

Looks like all the relevant changes from 4.2 to 4.4 were actually introduced at Release 4.3 !

-- new or fuxi: Class1::method3 notation
In Class1::method3, the method can be static or non-static.

The double-colon notation is similar to namespace. It means the actual method definintion is in Class1.

A common notation is Class1.method3, but the dot often implies the LHS is an object or variable.

-- fuxi:
order can be cancelled
fill can be busted
Cancelled order can be restated.

-- new 
#49 Sender comp id
#50 Sender subID under #49, aka whoToCall, often an individual

#56 Target comp id
#57 Target subID under #56, often an individual

-- new: gitBash: launch a GUI and return
If the original command is "good", then you can run "start original command args if any"

If the original command is a function (among other conditions), then you can append an ampersand to origional command

-- new
What if you have java (or other source code) files in your project but you want them excluded during build?

We probably need some adaptability/compromise. Most-needed would be "messy git history"

Sugg: change file extension to append *.txt
.. but messy git history 

Sugg: in git, keep the file in a non-source folder, like dat/log/cfg/script folders
.. but future developers may miss it
.. but messy git history 

Sugg: comment out entire file
.. but noisy grep

sugg: keep the file in build, just like many other unreferenced classes, but add comment to explain. 
.. but noisy grep
.. but compilation errors
.. but misleading usage analysis by IDE

-- fuxi: push an arbitrary local branch
git push origin anyBranch

-- fuxi: bash to source multiple  .func.*  files
you need a for loop. 

--fuxi ASCII is a 7-bit encoding
The original ASCII table is encoded on 7 bits, and therefore it has 128 characters.

Nowadays, most readers/editors use an "extended" ASCII table (from ISO 8859-1), which is encoded on 8 bits and enjoys 256 characters (including Á, Ä, Œ, é, è and other characters useful for European languages as well as mathematical glyphs and other symbols).

-- new: linux command: count group-by 1stWordEachLine
uniq -c # is the basic command. To make use of it, we can run perl to trim each raw input line down to the relevant word and nothing else.

-- new or update ..
P 198 [[essentialC++]] has a sharp pointer "... mistake is to confuse c++ exceptions with hardware exceptions, such as seg fault or bus error. For a c++ exception to be thrown, there is a throw expression somewhere in program code."

I believe many hardware exceptions (such as seg fault) are detected by low-level software code. 
Many programmers don't distinguish those agaisnt userland exception creation.

rare JIV topic, perhaps only in c++JIV, so I don't want to read too much. 
I believe java beats c++ in documenting system exception. 

~~ in ANSI C, I think errno.h standard header is a primitive solution. The header defines a bunch of  fairly standard (but not platform-indepedent) macro constants for common error conditions. 

You are free to explore those macros (i.e. error conditions). They should have comments.

errno.h also declares an global varible "extern int errno;" This variable is allocated once, and accessed by countless "producer/consumer" functions. A singleton object for many error conditions!

Segfault is actually a signal defined as SIGSEGV in ANSI signal.h. Same file also defines other low-level (hardware) exceptions like illegal instruction, interrupts,,,

How are signals and errno related? Don't know.

-- update which bpost on static
Function f99() in file2.cpp is by default accessible from any other file like file3.cpp.
If you want file3 to not see f99(), then you can use 'static' in file2. 
This f99() becomes private to file2.cpp.
I think this can be useful when combining many files from different sources.
I think I have examples to prove it.

Similarly, a file-scope static variable is private to its file, even if another file uses "extern" to link to it.

-- new: calloc(): slightly diff from malloc()
Feature: calloc() zero-initializes the memory before returning it.
Non-feature: calloc() returns the same void pointer type as malloc()
Non-feature: returned memory size is identical

calloc() is (not a must) often Preferred over malloc() when allocation arrays.

-- new: goto vs long jump in c++
diff: goto is intra-function. Long jump is across functions. Therefore, it's known as nonlocal jump.
We can google for legit use of long jump

-- fuxi: why some type of problems are more popular on question banks
Most coding interviews last 30m only.

array/string problems are easy to explain/understand, easy (for an interviewer) to set up

Threading questions are much harder to set up and test.

-- fuxi or new ..
set -x # very useful to tracing scripts. Rarely, it fails to show the script1.sh when we have 

source ../a/b/script1.sh
-- fuxi
In python dict initilization, you may want to specify the keys in a consistent order. The order is preserved when you print myDict.keys()

print(f'{var1:33}’) # prints at least 33-chars  and won’t truncate
