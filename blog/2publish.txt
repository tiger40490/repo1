--iphone
unlimited local call? Not really needed. I will probably get used to the luxury.

I need it mostly for company calls, so let's wait to see that need
--GS-sg was a tech win

-- mayb: eStatement de-enrol
--new: c++low-^high- end jobs
c++ low-end jobs are becoming scarce but high-end jobs continue to show robust demand. I think you can see those jobs across many tech companies.

So only high-end developers are needed. The way they select a candidates is ... QQ. I think I have the critical mass now.

In my limited view, Java high-end jobs tend to be coreJava. I continue to hold my position in coreJava interviews.

--new: if I commit myself I might do well@@
sometimes I tell myself "if I commit myself I could do well in a job and stay beyond 2Y." ... Largely romanticizing. It has not happened and unlikely to happen. Key reasons

* my immigration plan
* for perm jobs, after 12M I tend to receive neg reviews, partly due to benchmarking. No benchmarking for contractors
* My cash-flow is positive and I can afford to change to lower jobs, unlike some peers.
* Nowadays, annual job hopping is not so uncommon as programmers are a hot commodity. (Still, as I age, I avoid that and try to stay for 2Y+)
* my U.S. job was usually contract job? Not really a obstacle, as conversion to perm is always possible
--QQ=fake;zbs_learning=treacherous
I used to feel my QQ knowledge was not zbs but now I think many interviewers (like myself) ask zbs questions. zbs is a vague concept. QQ has a well-established range of topics. Experts sizing up each other ... is mostly QQ

Biggest danger with zbs learning -- when I spend my precious spare time on zbs not aimed at QQ, I inevitably regret. Without QQ, the learning lacks reinforcement, positive feedback loop... and fades from memory. 
I think in SG context the dearth of interviews make zbs learning treacherous

Therefore, zbs learning must aim at xref and thick->thin.

? One guy with theoretical zbs (either strong or poor QQ) may be very mediocre joining a new team.  It depends on the key skill needed in the team. Is it localSys, design ...? I tend to feel what's really needed is localSys.
--new: conclusions on my mvea era # i keep it in gitblog for commute. Not ready for publish

* Not much positive feedback beside 'providing new, different viewpoints', but Josh doesn't give positive feedback anyway
* should be able to come back to MS unless very stringent requirement
* Josh might remember Victor as more suitable for greenfield projects.
* I think Josh liked me as a person and understands my priorities
* I didn't get the so-called "big picture" that Josh probably valued. Therefore I was unable to "support the floor" when team is out. The last time I achieved that was in GS.
* A few times I worked hard and made personal sacrifices. Josh noticed.
* In the final month, I saw myself as fairly efficient to wrap up my final projects 
* Q: was the mvea c++ codebase too big for me? No, given my projects are always localized.

I had a few proud deliveries where I had some impetus to capture the momentum (camp out). Listed below
I think colleagues were impressed to some extent even though other people probably achieved more. Well, I don't need to compare with those and feel belittled. 

This analysis revealed that Josh is not easily impressed. 
Perhaps he has high standard as he didn't praise Rahul either.

* I identified two stateless calc engines in pspc. Seeing the elegant simplicity in the design, I quickly zoomed in, stepped over and documented the internal logic and replicated it in spreadsheet.
* my pspc avg price sheet successfully replicated a prod "issue", shedding light into a hitherto murky part of the codebase
* I quickly figure out the serialization root cause of the outage
* I had two brave attempts to introduce my QOT innovation
* My 5.1 Brazil pspc project was the biggest config project to date. I single-handedly I overcame many compilation (gm-install) and startup errors.
