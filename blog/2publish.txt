--new blogpost %%CV profile cf 200x era
Until my early 30's I avoided hot enterprise technologies like java/c++/SQL so my rating in the "body-building contest" was rather low. Analogy? 
* An electronics engineering graduate stuck in a small, unsuccessful wafer fab
* An uneducated pretty girl unable to speak well, dress well.

Now my resume (and zbs) includes java/c++/py/SQL and algo trading, quant, latency ... and I have some accumulated insight on (beside core java) core c++/c#, sockets, 

--new blogpost RTS feed for Internet clients #Mark
[category SDI]
Q: what if some clients subscribe by a slow internet connection and your orderbook feed need to provide delta updates each time a client reconnects?

Solution 1: FIX/TCP .. sender to maintain per-client state

Solution 2: Suppose we have too many clients. To minimize per-client state management, my sender would simply multicast to all clients real time updates + periodic snapshots. A client AA can request a snapshot on any symbol group, and I will multicast the snapshots on a refresh channel. If client BB never requests anything, BB can ignore the refresh multicast channel.

Request quota -- each client like AA can request X free snapshots a day. Beyond that, AA's requests would be regulated, or charged a fee.

It's possible to replace the refresh multicast group with unicast UDP, but to sender multicast solution has advantages without disadvantages. 
* multicast can be valuable to clients who like more frequent snapshots than the periodic.
* if there was an outage affecting many clients, each would request the same snapshots, creating unnecessary work on the sender. The quota encourages each client to monitor the refresh channel before requesting.
* My operations team can also utilize this refresh channel (or the publisher channel?) to broadcast unsolicited (FreeOfCharge) snapshots. For this task, I would avoid using the publisher channel as it can be busy sending real time updates.  We don't want to interleave real time and snapshot messages.

--new blogpost Quoine IV
Q: what's unique about your integrated feed?
Q: given a random string of bracket openers/closers, write a bool function to determine if it's balanced
..  every closer must not precede its matching opener
%%A: Now I feel no stack needed. Just use an int to keep count of unclosed brackets. but a stack is more versatile

Q: how do the 8 threads in your parser manage the 48 channels?
%%A: each thread only knows about the 6 channels -- publisher/retrans/refresh on Line A and B. Hardcoded affinity

Q: any interaction with the matching engine team?
Q: name some examples of those mistakes they made in the beginning?

Q: Have you considered FPGA?

Q: any github profile?

.. Questions about ecosystem including add-on packages

Q (Richard): what c++14/17/19 features do you use?
Q: what c++ IDE do you use?
A: vi is enough. Most colleagues use vi

Q: what's your build system? Clion?
A: various things based on gmake

Q5: in your work do you use any external libraries
%%A: I know enough STL, but this project doesn't use any heap allocation. Some projects use a lot of boost libraries.

Q5b: in that case how would you implement a basic http endpoint?
%%A: I would write it in python, c# or java
Q5c: but all of your data and functions are in c++
%%A: I would use socket api, but I agree this is such a common task that there must be a number of libraries
