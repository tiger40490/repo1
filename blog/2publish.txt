--new blogpost: dev-lead IV is not as easy as they think
re: Ashish's promotion and Kyle discussion
Q: intrinsic or extrinsic motivation?
(If you can hold such a position long) The financial reward can be big but not the only reinforcement of absorbency, engagement, sustained focus ... 
(Kyle pointed out -- there must be some intrinsic motivation in the Ashishes and Rahuls. "Traction" and "engaging" are the words I would use.

I feel Ashish commits more personal energy than his colleagues do on localSys because he derives some joy. 
In contrast, I commit more personal energy than other candidates on QQ (and to a lesser extent coding drill) because I derive some joy.

GS was a watershed defining experience in my career. #2 experience is probably Stirt. Since big bonuses are utterly unreliable, FTE career is comparable to a contract career financially, but inferior in terms of stress, self-esteem etc.

Q: portable tech skill?
In a dev-lead role, There may Not be orgro, thick->thin, or any portable GTD skills. 
Among the tech skills in a dev-lead role, the portable portion is often below 5%. 
As a result, you don't really gain much QQ advantage for the next IV.

Q: localSys?
Dev-lead needs many skills, but locallSys is a basic skill. 
If i were Dev-lead or app-owner, I (peers? not sure) would need huge t-investment in localSys.
Those who commit to localSys are rarely promoted further, as explained in numerous blogposts.
 
Given a choice between localSys xx vs QQ (or coding drill), I would not choose localSys, because of accu, portable t-investment. 
This is a key reason for my mediocre experiences.

Passing the tech interview to get a dev-lead role isn't easy. 
Candidate competition can be real. 
So I think my ex-colleagues need a lot of effort to pass those interviews. 
Just look at CSY, Deepak and my own attempt to get into HFT .. how many failures and how much t-investment needed.
It takes more than on-the-job learning. It takes months or years of absorbency, sustained focus... 
Most of us underestimate that "bar" until we try and fail repeatedly to clear it.

--update blogpost on greenfield^brownfield:
it's actually not hard to build some new "mkt data engine" as Quoine's Richard did over a few months, since greenfield is much simpler than brownfield. 

Sundip wrote an prototype of StirtRisk over a week, but the really big effort is the build-out from prototype to finished product.

Kenny of Trecquant designed something really simple that supposedly does the same job as a 100-man-year system, 

I created a FIX engine over a few hours.

I implemented a basic order book over a few hours even when I was new to c++
