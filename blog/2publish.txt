--new new blogpost: over last10Y no$roti2branch out@java because..
So far, we java developers were lucky so we see no financial gain in diversification.

I feel someone like Mithun has low motivation to deep dive outside java so their breadth and depth would be (not slightly) limited
--new blogpost: ##RDBMS=architect's toolkit
stored proc can _greatly_ simplify business logic as the business logic lives with the data ...

Even without stored proc, a big join can replace tons of application code implementing non-trivial business logic
hashtable lookup can be implemented in SQL (join or sub-query) with better clarity and instrumentation.
Much fewer implicit complexities in initialization, concurrency, input validation, null pointers, state validity, invariants, immutabilities, ... 
OO and concurrency design patterns are often employed to manage these complexities, but SQL can sidestep these complexities.

Modularity is another advantage. The query logic can be complex and maintained as an independent module (Note on the presentation layer, javascript offers  modularity too). Whatever module dependent on the query logic has an dependency interface that's well-defined and easy to test, easy to investigate.

In fact testability might be the most high-profile feature.

I think one inflexibility is adding new column. There are probably some workarounds but noSQL is still more flexible.

Another drawback is concurrency though there are various solutions.

--new new new blogpost: java perf^simplicity
Paradoxically
java's syntax simplicity is on par with python, better than c# and much better than c++. Paradoxically, 
java's performance is on par with c# and c++, largely due to JVM and JIT

java has been popular on web servers, and crucially the newer mobile, cloud, big-data platforms, beating c++, c#, python

java's adoption rate as a foundation platform or integration-target... is better than all other languages. 
Many products are built for java, on JVM or with java in mind. 
I'm deliberately vague here because I don't want to spend too much time analyzing this vague, general observation.
s algo is conceptually simpler.

--new blogpost: decline of quant-dev: low value-add
Q: why quant jobs used to be more abundant and pay a premium even though the economic value-add of the quant skill has always been questionable. 
A: because the traders made money and subsequently received a big budget. Now budget is lower.

Same can happen to quant traders.

Some UChicago lecturer once commented that everyone should get some quant training as every high school student does math. I think it is not necessary.

I am more theoretical and was naturally attracted to this domain but the value-add reality soon prevailed.

Tech shops love algo challenges and speed-coding which have dubious value-add similar to the quant skills. However, the hot money in tech sector is bigger and last longer. 

--update blogpost on take-home coding iv:
ensure file timestamps are all within a short window. Prefer to use fewer files

if I claim 2H, then leave some rough edges

If using c++ then show off some TMP hacks

do i need to implement user edits?

do i want to spend many more hours on a thread-pool async solution? yes this would be fun
--update blogpost on meaningful endeavors for family well being
competitive strength in speed coding contest -- such contest are now more prevalent and the skills are more valued 
competitive strength in dStruct/algo beyond the classics
competitive strength in core cpp QQ
competitive strength in core java QQ -- bigger job market
competitive strength in socket QQ
competitive strength in SQL QQ (and perl GTD) -- better than swing 
competitive strength in math in school -- huge and long-term impact
competence in localSys -- no long-term impacts, so Ashish's t-investment is unwise
improvement in yoga and fitness

In each "competitive" case, you build up competitive strength over J years but may lose it in K years. Each strength has very different long-term impacts, not "zero" (transient) as we sometimes perceived them to be.

Valuable resources are scarce and is a competition. Therefore this competitive profile has long term impact on health, mental aging, stress level, job choices, commute, amount of annual leave.

Any higher ROTI?

You can say every woman's natural beauty has imperfections when you see that woman everyday. This is because our idea of perfect beauty is based on paintings and photos, not live humans. Similarly, every endeavor's ROTI has imperfections compared to our naive, idealized concepts.

If you look for imperfections you will always find some.... but such fixation on imperfections is cynical, demoralizing and unproductive research

Need to zoom into my strategic strengths + long term interests such as low-level, theoretical stuff, pure algo, dstruct, and avoid my weaknesses 

low level QQ -- my strength
low level investigation using tools + codebase -- my weakness
picking up new GTD challenges -- my relative weakness
picking up new IV topic -- my relative strength
