=====Q (Deepak 2019) tough matrix problem: 
given a black/white but mostly white matrix, for each cell, compute the least horizontal/vertical steps (shortest distance) to a black cell.

Given a Matrix with 1's and very few 0's, replace all the 1's in the matrix with the adjacent distance to nearest 0. There can be more than one '0' in the matrix
Ex : Input: //Matrix contains more than one '0'
Matrix = {      1, 1, 1, 1, 1,
                1, 1, 1, 1, 1,
                0, 1, 0, 1, 1,
                1, 1, 1, 1, 1,
                1, 1, 0, 1, 1 };
Output = {      2, 3, 2, 3, 4,
                1, 2, 1, 2, 3,
                0, 1, 0, 1, 2,
                1, 2, 1, 2, 3,
                2, 1, 0, 1, 2 }

The Original question that was asked in the Interview was simpler. The actual question was given a Matrix, replaces all 1's with distance form the Element that contains 0. In this problem there is only One '0' in the Matrix.

Input : //Matrix contains exactly One '0'
Matrix = {      1, 0, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1 }
Output = {       1, 0, 1, 2,
                 2, 1, 2, 1,
                 1, 2, 3, 4,
                 4, 3, 4, 5 };
		   
NOTE : Only Adjacent distance is to be calculated, not Diagonal. 
-------------------
Theoretical limit: O(N)

suppose there are W white cells.

if we know for sure the scores in four neighbors, then it's O(1) to work out my score.

which cells have known scores? those next to the whites.

--idea 3 (frontier):
Does this algo work with any graph?
Hope to simplify it to improve clarify and correctness
What if the white cells are on the perimeter and the frontier shrinks?
How would two frontiers join?

initial-scan #0a to initialize all non-white locations to -1 (indicating "green"). Save the number of greens in a "greenCount"
initial-Scan #0b to collect all white locations. For each white location F with some green neighbor, saves F in a "frontier" collection, perhaps a linked list. 

Also create an empty "new frontier" collection.

The initial scans can be combined but at the cost of simplicity.

Invariants before a subsequent update-scan -- 
* Every frontier location has some green neighbor. 
* new frontier collection is empty. 
* greenCount is updated.

update-scan #1 update each adjacent green location to the frontier. Set score to 1, finalized and no longer green. iif a finalized location F has a green neighbor, then save F in the new frontier collection. 

After the scan, assert the new and old frontier collections have no overlap. Now swap old and new frontier collections and clear the new collection. 

update-scan #2 for each location in the frontier, update adjacent green locations to 2, finalized and no longer green. If such a finalized location F has a green neighbor, then save F in the new frontier collection. 

Green count should now reduce. When it becomes 0 we are done.

big-O? At each scan, the new frontier is usually larger than the old frontier until an inflection point. If before each update-scan we keep a count of the frontier collection size, i think they won't add up to exceed N. Therefore, total complexity is O(N) provided the fanout is a constant like 4. If fanout is unlimited, then possibly O(V+E) since we visit each node and each ege up to 3 times.

--idea 2 (shells):
scan #1 to save all white cell locations, and save all black cell locations in a shadow matrix (bool shadow matrix of the same size as original matrix) and a blacklist (hashtable indexed by cell location)
For each while, compute distance to center. At end of this scan, designte one whte cell as red i.e. closest to center.

scan #1b[O(N)] update all black cells with d2red. Now we have some baseline values, to be improved
scan #2 [O(W)] for each white, update all cells around it with distance 1. Remove the updated cells from the "blacklist"

Also set the bool in the shadow matrix

Scan #3 for each white, update the 2nd shell

details?

If a black cell is updated by 5 white cells in the same iteration, then all 5 whites would be equally distant, so the first of them would remove the black cell from blacklist.

So each black cell is only updated once .. O(N)?

--idea 1 (DP):
Scan#1 from top and left, update each cell with a "TL score" i.e. shortest dist ignoring the Bottom-Right quadrant of cells i.e. cells right-and-lower of current.

consider a typical cell on 2nd row. what's tl score? Can compute using upper and left neighbors? will it ignore a white on the right?

Scan#2 from bottom right, to compute a BR score for each cell

Scan#3 (can be part of Scan#2) combine the data

Rationale -- for each white cell, the shortest path can be in either BR quadrant (Scan2) or (Scan1) the other 3 quadrants. 

==max path sum problem(s), where a graph node has many directed edges in and out
--variation: single origin, single destination
--variation: single origin, any destination among 55 leaf nodes
--variation: each node has a +/- value 
--variation: each edge has a +/- value
--Special case -- pyramid (i.e. layered nodes). I think for these problems, I would try DP. For each node, determine (and store) the max cum-sum up to that node.  Need to start from the layer 1 nodes (1 hop from origin), then layer 2 nodes. 

Markov -- For any node AA, the max cum-sum to AA only depends on the previous layer. No need to remember or compare any of the paths to AA; only need to remember the max cum-sum up to AA.

--Special case -- for a non-recombinant binary tree, i would use DFT + Kadane. Each origin-to-leaf path is independently handled.
====
--update blogpost: why c++
[G3] differentiation. 
[G5] C insight helps deepen my understanding (zbs) in java, python, kernel, latency, concurrency, ...

--new blogpost: reward4coding,yoga,diet
insufficient reward, celebration of the huge effort in coding drill, yoga, diet...

At d-resort:
:) as planned, did some stretching and coding drill, but I basically dismissed and forgot them!
:) as planned, boy did lots of math 

--new blogpost: coding drill@flight
no need to feel guilty about coding drill. The less guilt the better for my system. The guilt is completely counterproductive and unfair
--new blogpost: salary has least impact@family well-being
sometimes I feel 20k lower salary doesn't affect my self-esteem or family well-being. 

In contrast, stigma/respect/coworkerBenchmark, commute, workload have bigger impact on family well-being

stigma has heaviest impact on self-esteem
--new blogpost: self-esteem: stigma^salary gap
In terms of my past experiences of self-esteem under attack, which attacks were more serious and higher priority for future planning?
? stigma/appraisal/coworkerBenchmark
? salary gap cf peers -- relatively easy to accept. 
? brank -- I have kind of given up on this front after I chose the contractor career
Brank without salary gap is no issue actually

? property and other assets
Note workload and commute has no impact on self-esteem

--email
Zofia,

Over 5 years, I see you have proven yourself good at teaching little kids. You are better than most pre-school teachers.

Do you have other strengths such as nail polishing or managing tenants? I think you may be competent at those jobs too.

I now favor locations with more Chinese, so the demand for Chinese pre-school would be higher

--update blogpost on take-home coding iv:
ensure file timestamps are all within a short window. Prefer to use fewer files. Java solutions require more files :(

if I claim 2H, then leave some rough edges like validations
