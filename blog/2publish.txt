--todo in SG
USD cash
food
SIM card

--add to blogpost on GS-sg
In SG, more than half the time I was assessed as a dev lead (or architect) but I don't want to. 

U.S. contract market is better.
--new: jvm^c++ as infrastructure
c/c++ is part of the infrastructure of many new technologies and will last for decades whereas java may not.

:( This doesn't mean there will be enough c++ jobs

JVM is an infrastructure for a small number of new languages and new frameworks like spring, hadoop, 
--add to CV:
had one-on-one discussions with Stroustrup about c++

--tmpl tmpl param
See my github demo

First and possibly biggest challenge is -- understand the limitation of traditional solutions

--new: linkedin contact pruning
cost of maintaining a linkedin contact -- hinders my search/browse.
I think I can remove some of the recruiters (that I have stopped working with)
How about some of the ex-colleagues and ex-classmates who I feel don't like me?

--new? stay]shape4CIV+QQ till 50
I would say QQ remains my stronger arm. I don't need to care about HFT shops. 
QQ benefits from thick->thin (and xRef) ... one of the key competitive advantages I could develop through blogging and continuous refresh.

CIV also benefits from blogging and continuous practice ... my competitive advantages. Remember David Okao's question "what is your secret weapon?"

High-end CIV is only needed at top west-coast shops. I think most of the top performers are young but I could stand out among my age group.

--update blogpost on design based@localSys nlg
nowadays I avoid design confrontation as I risk losing my reputation. I got my fingers burnt before, including Macq, GS .. when I cared about my designs.

I think Rahul, Zhurong .. are unlike me. He put his heart into it ... and cared about this designss.

--QQ=fake;zbs_learning=treacherous
I used to feel my QQ knowledge was not zbs but now I think many interviewers ask zbs questions. zbs is a vague concept. QQ has a well-established range of topics. Experts sizing up each other ... is mostly QQ

Biggest danger with zbs -- when I spend my precious spare time on zbs not aimed at QQ, I inevitably regret. Without QQ, the learning lacks reinforcement, positive feedback loop... and fades from memory. 
I think in SG context the lack of interviews make zbs learning treacherous

Therefore, zbs learning must aim at xref and thick->thin.

? One guy with theoretical zbs (either strong or poor QQ) may be very mediocre joining a new team. It depends on the key skill needed in the team. Is it localSys, design ...? 

--email to XR
After talking to you and a few friends, now I feel Wall St contract is the fallback career plan for me. The alternatives are:

* ibank VP jobs -- I know many people in these roles including our friend Youwei. Looks too stressful.
* SG jobs -- mostly as stressful as ibank  VP jobs. 
* web2.0 shops -- I assume the expectation will be too high esp. for older guys like me
* startups? No idea.

--new? ##%%conquests since GS
Until I left GS, I didn't know how it feels to "conquer" a sizable, lucrative tech skill. Such a tech skill represents a specific job market with supply and demand

perl? not sizable not lucrative :( Until 2011, Perl was my only core competency :( How lucky am I now !
coreJava as defined on WallSt .. was my first conquest. After this conquest I haven been trying to repeat my success story, while many peers stayed in one firm in order to move up.
SQL? Many interview topics not explored, but now SQL is no longer a sizable job market:(
MOM? Not sizable
c++ .. was my 2nd conquest, as experienced in 2017 onwards
CIV .. was my 3rd conquest. Growing bigger, though I only rate myself B among west coast candidates.

--new: ##taking up large codebases
I have grown from a sysAdmin to a dev
I have grown from web and scripting pro into a c++ pro
Next, I hope to grow my competence with large codebase

With a large codebase, I tend to focus on the parts I don't understand, regardless that's 20% or 80% of the code I need to read

I can learn to live with that ambiguity. I guess Rahul was good at that.

In a few cases, within 3M I was able to "take up" a sizable brown field codebase and become somewhat productive. As I told Kyle, I don't need bottom-up in-depth knowledge to be competent. 

In terms of count of successes taking up sizable brown-field codebase, I am a seasoned contractor, so I scored more than an average old timer in a given system.
* eg: Guardian -- don't belittle the challenge and complexity
* eg: mvea c++? My changes were localized, but the ets ecosystem codebase was huge
* eg: mtg comm, integrated into a huge codebase
* eg: StirtRisk personalization -- I made it work and manager was impressed
* eg: StirtRisk bug fixes on GUI
* -- the obvious success stories
* eg: AICE -- huge stored proc + perl
* eg: Quest app owner
* eg: error memos
* eg: RTS
