--update blogpost on word ladder
first scan ... No need to be extra clever as this simple O(NN) algo is optimal IMO. No need to worry about the visualization of the graph either because the edge list is a proven representation

"seen" -- or array of size N. Array is more elegant than hash table in this case.

the last routine can be extracted to a "simple routine to be implemented later", so no need to worry about it in a white board session.


--new blogpost: assignment^rebind]py^c++j 
for a non-primitive, java assignment is always rebinding. Java behavior is well-understood and simple, compared to python.

Compared to python, c++ assignment is actually well-documented .. comparable to a mutator method.

Afaik, python assignment is always rebinding afaik, even for an integer. Integer objects are immutable, reference counted.
In python, if you want two functions to share a single mutable integer variable, you can declare a global myInt. 
It would be in the global idic/namespace. q[=] has special meaning like idic['myInt']=..

Alternatively, you can wrap the int in a singular list and call list mutator methods, without q[=].

See my experiment in github py/88lang

--update to 3hit
* Qz had a meet/meet assessment and my mgr (Sundip) liked my performance in the X'mas season.

--new blogpost: ever recovered from PIP@@
* yes GS -- Everyone rated me Meet except deMunk who used the official rating to derail my transfer. Ironically, deMunk himself was forced out before I resigned.
* yes Qz -- I achieved Meet/Meet in Official, final record
* yes RTS -- despite Venkat's negative remarks (on every contractor), I was valued as one of the strong players and renewed
* OC probably -- I proved myself competent among my team peers. 
After the mgr warning, I didn't remain an under-performer.
--new: many failures before a success
i had so many failures at c++ interviews before I started passing. Now I look like a c++ rock star to some 
I had so many failures at HFT interviews before I started passing at DRW, SIG, Tower
I had so many failures at remote speed coding before I started passing.

With inet companies including nsdq, I can see my rise in ranking. If I try 10 more times the chance of further progress is more than 70%.

I /may never/ become a rock star in these west coast CIVs but I see my potential as a dark horse in 1) white-board CIV, 2) pure-algo
==new blogpost ##coreJava QQ topics: stand-out from crowd
beware of othRisk
* low-level core threading features -- higher market value than ecosystem features like concurrency utilities, which are so numerous that most candidates are not expected to know in-depth
* jGC
* latency tuning -- including JIT
* collections internals
-- second tier QQ topics
* reflection, AOP, bytecode engineering? never popular
* advanced generics? out of fashion
* class loader internals? out of fashion
* JNI? never popular
* jvm internals? never popular and never needed on any project

--email to Beier
Hi Beier,

What's the response you got? Did they say you cleared the bar? 

I wonder what's the minimum requirement to clear the bar. Is it one pass or two passes on white-board session? I know a pass on the architecture session is not in the minimum requirement.

TaskDependency -- I enjoyed the task dependency problem. https://bintanvictor.wordpress.com/2018/05/29/priorityq/ is my recall of the problem. 

I gave my best shot. I thought it was decent but interviewer actually rated it "below-the-bar". Did you come up with a solution with two priority queues? 

CodeReview -- I thought basic functional bugs would not be in any code under review. I focused on code quality, code smells and subtle bugs. So I didn't spend enough time on the core algorithm, and I missed some serious bugs in the code. This was a big surprise. Now I know "code review" actually means "bug spotting by eyeball", so next time I would focus on bugs in the core logic. How did you fare?

Architecture -- is the only question to test professional experience. 

I believe the white-board and code-review sessions are designed such that candidates with 0 to 3 years working experience can clear the bar. Even a high-school students can practice for a few years to pass these interviews.

In contrast, the architecture question required more experience than I had. I thought my ideas, analyses ... were non-trivial but interviewers actually rated it below-the-bar. So I assume they were looking for more technical insights, which more experienced candidates will have.

--upload justNotepad via gmail? LGlp
