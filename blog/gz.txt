
-- new: 尽职尽责 grandpa's wisdom
If you do your part yet struggle to meet some arbitrary expectation of the manager and feeling burned out or overstretched, then you have two choice --

You can bend over backward, learn to accept the higher expectation, higher workload as Jenny of MS described,,, slow boiling
You can put in a reasonable effort, 尽职尽责, resist the pressure to take on more

Judgement -- what's reasonable workload, and what's too much.
Sonic Jason's view -- no better job out there, so better accept.

-- new or update bpost on opaque^transparency.. which bpost?
After you gain insight into an otherwise opaque system, then your job security and career security improves to some extent, depending on 

* How indispensible is that opaque system?
* Across industries, how widely used is that opaque system? Murex? Spring? Aeron? Majority of opaque systems are localSys
* rarity of your insight .. Are you a one-man show? VolFitter:)
* depth of your insight. VolFitter:)
* longevity of the opaque system and its accu and churn-resistance

c++ is deeper and more opaque than java. Shell/perl/python are usually less opaque but python can become opaque as described in another bpost.
-- udpate "fast developers"
Q: can you imagine a fast doctor (perhaps travelling with soldiers) who treats lots of wounds but has a 1% error rate? If some of the errors are severe then he is disqualified and unreliable.

Q: can you imagine a restaurant chef very fast with his work, but once a while, produces a dish with salt omitted, causing complaints? (Note sometimes salt can be added later.) If too frequent, then she is disqualified.

In SWE profession, if there's a well-known error-prone coder, we often say that we constantly worry about him producing buggy code, so much so that we would rather not have him coding. The threshold of "too many missteps" depends on frequency and severity. 

A key factor is personal reputation. 

I tend to write more documentation than fellow SWE. The act of writing and rewriting detailed docs enhances my awareness of (personal) blindspots, hidden areas, edge cases. Those docs that are written for a wider audience would receive more attention from me the author.

Across a /structured/ codebase, I tend to bend over backward to enforce consistency. Inconsistency is breeding ground for bugs, so this habit can flush out some bugs.

A smaller habit is naming variables, functions and classes. I spend lots of time naming them precisely and consistently. That forces me to slow down and pay attention to some details in the logic.

All of these personal habits above slow me down, but they tend to protect my personal reputation and reduce those embarrassing or disastrous/devastating bugs.
-- fuxi or new: localSys ^ high-churn domains
portable t-investment .. zero for localSys 
engaging .. high-churn could be more exciting
market value .. zero for localSys

-- fuxi: I used to enjoy/exploit my perl/SQL/unix GTD "superpower"
I often find a secret killer skill in perl and shell as a power drill when facing a stone wall in project. 

advanced git is popular
shell scripting remains evergreen.
git-bash is useful for me, but not used by others
Nowadays advanced SQL is relevant only in places like PWM. Perl is only used for one-liners.
remote debugg .. Un-usalbe 50% the time when I need it. Live debugger is not as reliable as static command line tools.
One good use of remote debugging is .. revealing at least one way a method is used.

-- fuxi: some crunch times in past EPA projects
* mid 2020: RJO
* 2nd half of 2022: Quark
* Aug 2023 early 2024: Genepai