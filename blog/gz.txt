-- fuxi: The CoreData presentation introduced many new technologies in data management , including elastic cloud, data warehouse, ETL, MOM, noSQL ..  

These domains suffer high churn. Luckily, I didn't join Ab-initio.

java is relevant to all of them.
python is relevant to many of them.
C# is less prevalent.
C/c++ is too low-level, not associated with these high-level tools. 
-- update c is my first language
[[understanding and using C pointers]], a library book I have borrowed twice, contains practical GTD expertise nuggets, somewhat similar to [[safeC++]] and the debugging book. NOT written exclusively for library developers.

The GTD expertise are important to a self-respecting committed programmer in C.

functions passing string in/out 
void ptr usage
uninitialized ptr
array/ptr integration

-- new or fuxi
new languages claim to displace perl, java, c/c++ etc, but time will tell a different story. 
C# didn't dethrone java; python didn't completely eliminate perl; c is still widely used.

noSql claims to displace RDBMS, but time will tell a different story.

When linux was challenged by other free variants of unix, we thought linux would be forgotten.
-- update blogpost 
GS Hong Kong interviewer said array-based order book can achieve 1000 kmps.
It's easy to whip up a POC showing 1000 kmps, but how about all the real-world requirements in rebus? Your design and implementation will be imperfect and will impact the performance. In the end, will you maintain 1000 kmps?

-- where can I used this term?
tenuous job security

-- new?
Shi.Cheng hinted that interview prep is not his long-term mission. I think he wants to build zbs and grow on the tech ladder or the mgr ladder. German also said "it's hard to find a tech lead or app owner".

I felt slightly ashamed. However, now I'm mellowing up. Lead role comes with higher responsibility, higher stress, higher risk. Look at YW.Chen among others. The financial reward is not worth much. 

The risks of old-timer is easily underestimated.

-- new: memory leak: paper tiger
t_opaque
mem leak was presented as more elusive than NPE
mem leak was supposed to require source code scrunity.
mem leak in java and c# were challenging in my limited experience, but c/c++ was supposed to be much harder.
There were numerous instrumentation tools to help identify memory leaks. They help reinforce the notions of "complex, opaque, OMH"

I "subscribed" to this huge fear, being "sold" by numerous well-meaning authors. I felt inferior and helpless like a new-born baby in need of adult protection and hand-holding.
I think the memory leak these authors deal with are much tougher than my memory leaks. 

( Similarly, Henry Luo said DB turning is mostly about indices (yes in practice) but the DB experts would call it simplistic and naive. )

Then in RTS, I and my team used valgrind on a routine basis to identify memory leaks, in our industrial-strength, high-volume, realtime high-impact systems. No other tools were needed in my projects.

.. How about gpgpu, FGPA, kernel bypass, shared mem
I think all of the above are probably very simple in a real project.

.. How about lockfree?
Any design thats not very simple and clean is likely incorrect or high-maintenance.

.. How about TMP?
The complexity is not worthwhile in most projects

.. How about custom memory allocator

-- new: gpgpu ~ ab-initio: NOT general purpose
rule engine is another example

All of these vendors claim that their products are revolutionary and leave the traditional solutions in the dust.

However, the use cases are extremely niche. The skill is not highly sought after.

-- new: Dram refresh: localSys^criticalMass^
c++ > java because my java critical mass is easier more self-sustaining
localSys?
coding drill? Not so fast "decay"

-- fuxi:
t_jolt
if an employer permits some reasonable amount of blogging in office, then I'm willing to accept $5k less salary.

-- update or new
Through my late 40's to 50, in which technial domain will I maintain my competitive high ground?

core Java language? Remarkably stable
xLang concurrency
xLang dStruct
perl? Unfortunately perl6 has moved
drv pricing + bond math [Type1 dnlg] ? Yes because programmers don't study it
byte-level parsing
WallSt architecture [Type3 dnlg]

-- update the blogpost on 5 tsn domains
Now I recall that for years I was attracted to algo trading, automated trading, any trading decision using some math as it sounds cool.

Now I think this domain is still relatively well-paid, but doesn't generate high profit as before.

The complexity has not reduced. The field still needs people, but I feel it is losing the talent game against the newer domains like web2.0, DS/ML, crypto

-- new or update: my algo trading experiences
Citi Muni Auto-reoffer, inventory update.
Baml muti matching engine, offer adjustment/resend, position update (against venues) and inventory update (for reoffers)..
OC Quest robot responding to client RFQ
Quest also has a FXO quote update feature, sending to multiple conduits
Mvea sending exchange orders based on client orders. Order state management

Closely related to algo trading is the risk engines in my experience
* Stirt risk engine responding to new trades, position changes, and mkt data 
* Barcap real time risk engine

-- update https://btv-gz.dreamhosters.com/wp-admin/post.php?post=25175&action=edit
NoSql is bigData, not DS/ML. 

BigDataAnalytics includes BigData stack. 

Data Science probably favors python or R. ML is even less suitable for java.
ML includes classification, recommendation, ,, NeuralNetwork is part of ML

-- With 92S27 ex-classmates, I now can call myself a WallSt veteran techie, one of the most upstream sectors (only web2.0 techies are higher)
Evidence for "veteran"? Not GTD, not even zbs, but mostly the interview-visible expertise. 

This expertise is about the only criteria IMO. Anyone "strong" on this front is considered a veteran, regardless of his GTD, localSys....  Anyone weak on this front .. can still be a veteran, but with limited mobility.

A veteran developer doesn't need to be an above-average developer or expert developer but need to possess some demonstrable experience in the field. Therefore, a long stay in one team (Jack Z?) is less valuable than many one-year projects.

Can you acquire this expertise with only 3Y experience? You would need to attend many interviews.

-- update one of the blogposts on appraisal
as employee, when I have family issues, kids issues, investment foes, I would fear an appraisal. Even a bonus disappointment would add a heavy blow.

As contractor, no such fear. When I'm let go, I would easily attribute it to budget and go job hunting again.

--fuxi: wq.l felt govtech is not a technology laggard. He is attracted by that and the job stability. 
Work load is not lighter than elsewhere in his experience. However, I would say many private employers are more aggressive more pushing more ruthless.

Is age a problem? wq.l felt yes because the younger developers have more flexibility in salary requirement. However, I feel the younger dev also has an expectation of rising income. Any signs any evidence that "My career may not be as promising as thought, not growing as fast as my cohort" tend to be devastating. In other words, the older dev is allowed to be slower, mediocre, more low-energy (as I told Sachin).

-- fuxi: IT consulting service offered by mgmt consulting firms ... is facing competition from the original vendors providing similar consulting services.

--fuxi web2.0 is a good phrase for a vague and broad category. Remarkably, It has not received any criticism and has stood the test of time

-- fuxi: c++ displaced [C, cobol, Delphi, VB...] before java diplaced c++. Now java market share is eroded by js and py.
losing to py in data-centric systems.
losing to js in web apps. Many features are moving from server side to client side. 

-- fuxi: java is better...
the core lang is more stable than c++ in terms of IV topics

Even though jxee job market is volatile, the coreJava niche job market enjoys robust demand.

My strength in low-level details is far more valuable in java than py, perl, SQL etc.

compared to c++, cdd/job ratio is not very different, but the java cdd pool is low-quality. In coreJava, I can easily stand out.

--informal feedbacks during year-end party
"You are process oriented, which is missing in the local team. We are not used to so many questions so we ignored some of your questions. We assume each team member has maturity and needs only a pointer and can figure out the rest." In zed I used to feel the same about asking questions, but in GS it all changed. 

* Kevin -- "needs some guidance"
* Gary -- needs to speak out. Not taking initiative to show leadership.
* Anurag -- very sharp guy, but i think he is fast at the expense of quality. Nevertheless, he is probably very sharp.

It's really dangerous to openly talk about other team members in front of other people whom we may not know so well.
These 2 guys are sophisticated but I think their habit is quite reckless. 
However, if we don't take this opportunity now, then we may not know how we think of each other.

I was rather bold when talking about Anurag in public. I think that might be the first unsafe comment of the night.

--fuxi: smart guys like Kun.h couldn't crack the quant IV cos
* too selective, comparable to HFT
* poor market depth. I guess Kun ended in a risk quant role.
