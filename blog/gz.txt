-- new:
t_jolt
if an employer permits some reasonable amount of blogging in office, then I'm willing to accept $10k less salary.

-- update or new
now in my late 40's, which technial domain have I maintained my competitive high ground?

core Java language?
xLang concurrency
xLang dStruct
perl? Unfortunately the perl6 has moved
drv pricing + bond math? Yes because programmers don't study it

-- update the blogpost on 5 tsn domains
Now I recall that for years I was attracted to algo trading, automated trading, any trading decision using some math as it sounds cool.

Now I think this domain is still relatively well-paid, but doesn't generate high profit as before.

The complexity has not reduced. The field still needs people, but I feel it is losing the talent game against the newer domains like web2.0, DS/ML, crypto

-- new or update: my algo trading experiences
Citi Muni Auto-reoffer, inventory update.
Baml muti matching engine, offer adjustment/resend, position update (against venues) and inventory update (for reoffers)..
OC Quest robot responding to client RFQ
Quest also has a FXO quote update feature, sending to multiple conduits
Mvea sending exchange orders based on client orders. Order state management

Closely related to algo trading is the risk engines in my experience
* Stirt risk engine responding to new trades, position changes, and mkt data 
* Barcap real time risk engine

-- update https://btv-gz.dreamhosters.com/wp-admin/post.php?post=25175&action=edit
NoSql is bigData, not DS/ML. 

BigDataAnalytics includes BigData stack. 

Data Science probably favors python or R. ML is even less suitable for java.
ML includes classification, recommendation, ,, NeuralNetwork is part of ML

-- IT consulting service offered by mgmt consulting firms ... is facing competition from the original vendors providing similar consulting services.

-- With 92S27 ex-classmates, I now can call myself a WallSt veteran techie, one of the most upstream sectors (only web2.0 techies are higher)
Evidence for "veteran"? Not GTD, not even zbs, but mostly the interview-visible expertise. 

This expertise is about the only criteria IMO. Anyone "strong" on this front is considered a veteran, regardless of his GTD, localSys....  Anyone weak on this front .. can still be a veteran, but with limited mobility.

A veteran developer doesn't need to be an above-average developer or expert developer but need to possess some demonstrable experience in the field. Therefore, a long stay in one team (Jack Z?) is less valuable than many one-year projects.

Can you acquire this expertise with only 3Y experience? You would need to attend many interviews.

-- java is better...
the core lang is more stable than c#, and also c++ in terms of IV topics

Even though jee job market is volatile, the coreJava job market enjoys robust demand.

My strength in low-level details is far more valuable in java than py, perl, SQL etc.

compared to c++, cdd/job ratio is not very different, but the java cdd pool is low-quality. In coreJava, I can easily stand out.

-- c++ displaced [C, cobol, Delphi, VB...] before java diplaced c++. Now java market share is eroded by js and py.

losing to py in data-centric systems.
losing to js in web apps. Many features are moving from server side to client side. 

--QQ learning: books beat websites
books support much easier refresh, annotation.
Most of my peers don't prefer books, but I find my learning pace significantly better with books, so this is my competitive advantage.

-- update one of the blogposts on appraisal
as employee, when I have family issues, kids issues, investment foes, I would fear an appraisal. Even a bonus disappointment would add a heavy blow.

As contractor, no such fear. When I'm let go, I would easily attribute it to budget and go job hunting again.

--fuxi: wq.l felt govtech is not a technology laggard. He is attracted by that and the job stability. 
Work load is not lighter than elsewhere in his experience. However, I would say many private employers are more aggressive more pushing more ruthless.

Is age a problem? wq.l felt yes because the younger developers have more flexibility in salary requirement. However, I feel the younger dev also has an expectation of rising income. Any signs any evidence that "My career may not be as promising as thought, not growing as fast as my cohort" tend to be devastating. In other words, the older dev is allowed to be slower, mediocre, more low-energy (as I told Sachin).

--fuxi web2.0 is a good phrase for a vague and broad category. Remarkably, It has not received any criticism and has stood the test of time

--informal feedbacks during year-end party
"You are process oriented, which is missing in the local team. We are not used to so many questions so we ignored some of your questions. We assume each team member has maturity and needs only a pointer and can figure out the rest." In zed I used to feel the same about asking questions, but in GS it all changed. 

* Kevin -- "needs some guidance"
* Gary -- needs to speak out. Not taking initiative to show leadership.
* Anurag -- very sharp guy, but i think he is fast at the expense of quality. Nevertheless, he is probably very sharp.

It's really dangerous to openly talk about other team members in front of other people whom we may not know so well.
These 2 guys are sophisticated but I think their habit is quite reckless. 
However, if we don't take this opportunity now, then we may not know how we think of each other.

I was rather bold when talking about Anurag in public. I think that might be the first unsafe comment of the night.

--fuxi: smart guys like Kun.h couldn't crack the quant IV cos
* too selective, comparable to HFT
* poor market depth. I guess Kun ended in a risk quant role.
