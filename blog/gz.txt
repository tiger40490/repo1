
--new or update blogpost on IV_skill ^ GTD
https://btv-gz.dreamhosters.com/wp-admin/post.php?post=36560&action=edit

Sometimes we get into a new job and find a nasty manager (Yang to Roland), or long hours (PWM), or hard, uninspiring technology stack (Qz).

Some 10% just quit decisively within 6M, like Henry Fu. This route requires the key skill of IV.

The rest of us try to get used to the new job. Sometimes this proves to be patient, steady and effective.

Some 10%+ suffer in pain, like Sudhir (based on my limited knowledge) and my OC job.

--new: architect career needs: breadth imt depth
t_expertise, t_churn
[[Fundamentals of software architecture]]

Developers need technical depth (and need to maintain that depth)... expertise. The book didn't mention the importance of interviews. Interview is the real arena for expertise, because after the interview, on the job, the candidate won't need a lot of expertise.

Archtects need breadth more than technical depth. So the authors advocates/suggests selectively giving up accumulated tech depth in some domains.

But in my experience interviewers seldom value breadth nearly as much as depth. 
by definition, breadth is not-deep ... too shallow to impress in most interviews.

Shallow knowledge is also more subject to churn.

mkt depth .. If 50 out of 100 software engineering jobs out there require some level of depth, then perhaps 5 require some breadth. Therefore, in terms of market depth, breadth is inferior to depth.

-- fuxi: The CoreData presentation introduced many new technologies in data management , including elastic cloud, data warehouse, ETL, MOM, noSQL ..  

These domains suffer high churn. Luckily, I didn't join Ab-initio. I think in these job interviews, there's no coding or low-level QQ quizzes, but probably lots of tool knowlege required. I recall the spring/hibernate interviews. If you acquire lots of tool knowledge, you will still lose the coding or QQ interviews.

java is relevant to all of them.
python is relevant to many of them.
C# is less prevalent.
C/c++ is too low-level, not associated with these high-level tools. 

-- new or fuxi
I actively stay away from high-churn technologies (languages) such as javascript, GO, Spark, Spring, NoSql, XML, Json

In my first 5 programming years I embraced the newest languages perl/php/javascript simply because I needed to cast my net as wide as possible. Slowly I gravitated towards mature, past-the-peak, languages/technologies like SQL, Unix, C

-- where can I used this term?
tenuous(fragile) job security

-- new or update
Shi.Cheng hinted that interview prep is not his long-term mission. I think he wants to build zbs and grow on the tech ladder or the mgr ladder. German also said "it's hard to find a tech lead or app owner".

I felt slightly ashamed. However, now I'm kinda mellowing up. Lead role comes with higher responsibility, higher stress, higher risk. Look at YW.Chen among others. The financial reward is not worth much. 

The risks to old-timer is easily underestimated. Their job security is tenuous.

-- new: memory leak + other paper tigers
t_opaque
mem leak was presented as more elusive than NPE
mem leak was supposed to require source code scrunity.
mem leak in java and c# were challenging in my limited experience, but c/c++ was supposed to be much harder.
There were numerous instrumentation tools to help identify memory leaks. They help reinforce the notions of "complex, opaque, OMH"

I "subscribed" to this huge fear, being "peddled" by numerous well-meaning authors. I felt inferior and helpless like a new-born baby in need of adult protection and hand-holding.
I think the memory leak these authors deal with are much tougher than my memory leaks. 

( Similarly, Henry Luo said DB turning is mostly about indices (yes in practice) but the DB experts would call it simplistic and naive. )

Then in RTS, I and my team used valgrind on a routine basis to identify memory leaks, in our industrial-strength, high-volume, realtime high-impact systems. No other tools were needed in my projects.

.. How about gpgpu, FGPA, kernel bypass, shared mem
I think all of the above are probably very simple in a real project.

.. How about lockfree?
Any design thats not very simple and clean is likely incorrect or high-maintenance.

.. How about TMP?
The complexity is not worthwhile in most projects

.. How about custom memory allocator

-- update https://btv-gz.dreamhosters.com/wp-admin/post.php?post=25175&action=edit
NoSql is bigData, not DS/ML. 

Data Science probably favors python or R. ML is even less suitable for java.
ML includes classification, recommendation, ,, NeuralNetwork is part of ML

-- fuxi: for livelihood security (food security?) many governments are not so dependable, but some governments are better than employers. 

However, In terms of financial support, government handout is tiny compared to employers'.

-- fuxi:
t_jolt
if an employer permits some reasonable amount of blogging in office, then I'm willing to accept $5k less salary.

-- fuxi: With 92S27 ex-classmates, I now can call myself a WallSt veteran techie, one of the most upstream sectors (only web2.0 techies are higher)
Evidence for "veteran"? Not GTD, not even zbs, but mostly the interview-visible expertise. 

This expertise is about the only criteria IMO. Anyone "strong" on this front is considered a veteran, regardless of his GTD, localSys....  Anyone weak on this front .. can still be a veteran, but with limited mobility.

A veteran developer doesn't need to be an above-average developer or expert developer but need to possess some demonstrable experience in the field. Therefore, a long stay in one team (Jack Z?) is less valuable than many one-year projects.

Can you acquire this expertise with only 3Y experience? You would need to attend many interviews.

-- fuxi or new: self-assessment: central, high-impact, high-value roles.
In 95G and Barcap, my role in the team was fairly central, high-impact, high-value.

Subsequent roles were somewhat peripheral. I need to get used to it.

To be fair, my OC role with Quest was fairly central. My NYSE Integrated feed handler was visible, high-value. My DevOps role in Macq was central and visible to the tech teams.

--fuxi: wq.l felt govtech is not a technology laggard. He is attracted by that and the job stability. 
Work load is not lighter than elsewhere in his experience. However, I would say many private employers are more aggressive more pushing more ruthless.

Is age a problem? wq.l felt yes because the younger developers have more flexibility in salary requirement. However, I feel the younger dev also has an expectation of rising income. Any signs any evidence that "My career may not be as promising as thought, not growing as fast as my cohort" tend to be devastating. In other words, the older dev is allowed to be slower, mediocre, more low-energy (as I told Sachin).

-- fuxi: IT consulting service offered by mgmt consulting firms ... is facing competition from the original vendors providing similar consulting services.

--fuxi web2.0 is a good phrase for a vague and broad category. Remarkably, It has not received any criticism and has stood the test of time

-- fuxi: c++ displaced [C, cobol, Delphi, VB...] before java diplaced c++. Now java market share is eroded by js and py.
losing to py in data-centric systems.
losing to js in web apps. Many features are moving from server side to client side. 

-- fuxi: java is better...
After java5, the core lang is now more stable than c++ in terms of IV topics

Even though jxee job market is volatile, the coreJava niche job market enjoys robust demand.

My strength in low-level details is far more valuable in java than py, perl, SQL etc.

compared to c++, cdd/job ratio is not very different, but the java cdd pool is low-quality. In coreJava, I can easily stand out.

--fuxi informal feedbacks during year-end party
"You are process oriented, which is missing in the local team. We are not used to so many questions so we ignored some of your questions. We assume each team member has maturity and needs only a pointer and can figure out the rest." In zed I used to feel the same about asking questions, but in GS it all changed. 

* Kevin -- "needs some guidance"
* Gary -- needs to speak out. Not taking initiative to show leadership.
* Anurag -- very sharp guy, but i think he is fast at the expense of quality. Nevertheless, he is probably very sharp.

It's really dangerous to openly talk about other team members in front of other people whom we may not know so well.
These 2 guys are sophisticated but I think their habit is quite reckless. 
However, if we don't take this opportunity now, then we may not know how we think of each other.

I was rather bold when talking about Anurag in public. I think that might be the first unsafe comment of the night.

--fuxi: smart guys like Kun.h couldn't crack the quant IV cos
* too selective, comparable to HFT
* poor market depth. I guess Kun ended in a risk quant role.
