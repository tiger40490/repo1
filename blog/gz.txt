-- update: I told wife that I won't look out despite increasing workload and expectations
"Out of the frying pan into the fire", 天下乌鸦一般黑

* G3 relative speed of figure-things-out.... not bad compared to most guys. As to my proj throughput, I'm not that far below the heavy-hitters.
* G5 relative complexity of codebase .. likely better than average. I am confident to understand all modules.

* G5 many heavy-hitters actually left Sgp team, so boss appreciates loyalty
* G9 acceptance of my age .. look at the age profile in NY and Ldn teams.

* G6 rare flexible hours .. I can work during quiet times (weekends, evenings) and take hours and hours off during the day.
* G7 commute .. likely well above average
* G6 excellent longevity and market value of tech stack + dnlg .. I don't mind staying in this domain for 10Y

* G0 total comp + medical + extra leaves
* G0 severance package

-- new or update bpost on opaque^transparency
After you gain insight into an otherwise opaque system, then your job security and career security improves to some extent, depending on 

* How indispensible is that opaque system?
* Across industries, how widely used is that opaque system? Murex? Spring? Aeron? Most opaque systems are localSys
* How rare is your insight? Are you a one-man show? Quant insight is a rare insight.
* depth of your insight

c++ is deeper and more opaque than java. Shell/perl/python are usually less opaque but python can become opaque as described in another bpost.

-- fuxi or update ...
I often find a secret killer skill in perl and shell as a power drill when facing a stone wall in project. 

remote debugg .. Un-usalbe 50% the time when I need it. Live debugger is not as reliable as static command line tools.
One good use of remote debugging is .. revealing at least one way a method is used.

-- fuxi: grandpa's wisdom
Ensure you don't make mistakes. If you do your part yet struggle to meet some arbitrary expectation of the manager and feeling burned out or overstretched, then you have two choice --

You can bend over backward, learn to accept the higher expectation, higher workload as Jenny of MS described,,, slow boiling
You can put in a reasonable effort, 尽职尽责, resist the pressure to take on more

Judgement -- what's reasonable workload, and what's too much.

Sonic Jason's view -- no better job out there, so better accept.

-- udpate "fast developers"
Q: can you imagine a fast doctor (perhaps travelling with soldiers) who treats lots of wounds but has a 1% error rate? If some of the errors are severe then he is disqualified and unreliable.

Q: can you imagine a restaurant chef very fast with his work, but once a while, produces a dish with salt omitted, causing complaints? (Note sometimes salt can be added later.) If too frequent, then she is disqualified.

In SWE profession, if there's a well-known error-prone coder, we often say that we constantly worry about him producing buggy code, so much so that we would rather not have him coding. The threshold of "too many missteps" depends on frequency and severity. 

A key factor is personal reputation. 

I tend to write more documentation than fellow SWE. The act of writing and rewriting detailed docs enhances my awareness of (personal) blindspots, hidden areas, edge cases. Those docs that are written for a wider audience would receive more attention from me the author.

Across a /structured/ codebase, I tend to bend over backward to enforce consistency. Inconsistency is breeding ground for bugs, so this habit can flush out some bugs.

A smaller habit is naming variables, functions and classes. I spend lots of time naming them precisely and consistently. That forces me to slow down and pay attention to some details in the logic.

All of these personal habits above slow me down, but they tend to protect my personal reputation and reduce those embarrassing or disastrous/devastating bugs.

-- fuxi: some crunch times in past EPA projects
* mid 2020: RJO
* 2nd half of 2022: Quark
* Aug 2023 onwards: Genepai

-- fuxi 
The salary peer-comparison is both background-heat and c-ray [cosmic ray]. It hits us all the time. Sometimes a comparison result is comforting/soothing, but mostly the xpSelf notices the negative, disturbing comparison results -- FOLB.

Most of the time we are cool about FOLB, but once a while we do feel affected. 

Therefore, my current salary is not really unimportant. I often say that between two jobs at the same base salary, I would prefer the contract position because there's no bonus no appraisal. 

The older I get, the less I am affected by the c-ray/FOLB, the more I appreciate a /sustainable/ salary. Those contract positions are more acceptable.

The job title benchmark is related but out of scope.

-- fuxi or update ...: 
Whether we use tbl or Genepai, I would have a relatively comfortable timeline... Am lucky.

when I feel stressed about Genepai progress, I can feel relieved that the two full-time young devs didn't find a better solution than mine.

Apparently, there's no yardstick to guage progress.
However, Genepai made enough progress (albeit small) to /earn/ multiple business trips between Sgp and NYC.

The deliverable is a dream. If you show effort and make *some* progress, then they would probably reward you for trying.

Other AI projects in EqTech rarely have any full-time devs. 

Every challenge in Genepai is my problem, but the 2 of them are supposed to help out, so it's fine to delegate to them, while I design high-level things and take on modules that are hard to delegate.

If one of them becomes better than me and more productive than me, that can be a good thing. Manager should not penalize me.

If they become independent and can contribute productively, I think managers would be delighted.
