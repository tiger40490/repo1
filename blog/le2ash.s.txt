Hi Ashish,

I wrote this long letter on the Friday we met. 

I learned many things today. Reply to any point that catches your eyes.

Turning 50, I now notice a growing habit to self-identify with perceived declines commonly associated with aging. I actively self-identify with the sterotype, partly to protect my ego and self-esteem. This sterotype is a very broad brush that paints over and ignores individual differences. A good example is my memory and coding test competence. As I said, the underlying, internal decline is actually small and slow at this stage but I routinely exaggerate it to explain various personal issues. It's a self-made fallacy told over and over. To recognize and expose it as a fallacy is painful and unpleasant, so I won't admit it as such. To be (brutally) honest with the self, here are some self-ratings (hopefully unbiased) relative to my peers in the 40-50 cohort.

* diet habit, workout .. excellent self-disciplilne; good condition for my age, albeit in slow decline
* cashflow high ground .. satisfactory total income; burn rate under control, though rising
* anxiety, temper, patience, complaining, gratitude .. overall not improving enough
.. impatience at road crossings .. major safety hazard throughout my life, now improving. 
* prudence in workplace communications .. improving a few weaknesses. Very few new issues emerging. 
* job security .. slightly better than previous jobs.  Therefore, low motivation to keep up "body-building" for interviews. 
* self-renewal in tech skills .. brushed aside. Losing form.
* lagging behind the curve? Perhaps. As I told you, I seldom notice a new technology worth learning. I cling on to CoreJava, c++, sockets, memory management, threading ... old technologies with decades of history.
* in-demand? not really. My skillset and age profile is less and less attractive to employers esp. in ageist Singapore.
* salary .. Contentment is a virtue. I refuse to benchmark myself by researching other people. (I do talk informally about salary ranges in vastly different roles, uncomparable to my role.)

Re realloc(), I found a blogpost I wrote on realloc a few years ago. I thought blogging would help to reinfoce learning. But today I didn't remember anything about my own writing. Before my next c++ tech interview, I would review my 1000 ~ 2000 blogposts on c++/performance/memory/linux/socket/... and rebuild the "memory graph" in my mind. When quizzed on a topic, I would then "traverse" my graph in real time, and find relevant details to impress the interviewer and survive the competition. If that interview is in 2030, then I should review in 2029, not now. (Obviously when I review my own blog, I would also read external content.)

To a lesser extent, I will also experiment with my 50~100 c++ programs in my GitHub account. I wrote some of them to explore certain c++ topics. These experiments are probably similar to yours.

Re low-level optimization (latency etc), as practioners discover new optimizations based on new hardware, I guess the low-level techniques will keep evolving year over year. So are the tech quiz topics. I used to pass (or ace) interviews on lockfree, contiguous memory, efficient low-level data structure, SQL tuning,,, but Alas that hard-earned knowledge (a competitive advantage) is losing relevance :( I'm one of the victims in the endless race towards the elusive zero latency.

Now I think this domain (i.e. low-level optimization) is fast-churn similar to GUI dev or web dev. Fast-churn is a Red Flag for greying technies who need a minimum "return on investment". My early investments in C, core-java, unix shell utilities, common algorithms, TCP/UDP, core concurrency,,, have yielded better ROI. In c++, there is also a body of core c++ knowledge that is always in scope for most c++ interviews, so ROI is good. A couple of c++ topics you brought up today might suffer fast-churn, therefore not core-c++ IMHO. Fast-churn techniques come and go, so "investment" in them may become irrelevant at interviews in X years. When you are 50 and struggle to cope with emerging interview topics, you might agree that some of the c++ topics you studied and aced in 2023 are fast-churn.

(Minor examples: In early 2010s I passed some c++ interviews thanks to self-study in a few topics that are no longer high-value: boost smart pointers, auto_ptr, xxxxxxxxxxxxxxxx)

Similarly, in concurrency domain, there is also a high-churn portion vs a stable body of knowledge always quizzed. Therefore, I take great pains to identify 

core c++ vs high-churn c++
core java vs high-churn java
core concurrency vs newer high-churn concurrency techniques
core data structure vs newer high-churn data structures

Looking back, I think I score higher, and forget slower in theoretical topics like bigO, probability and number theory puzzles. Is there churn in these interviews?
