--new blogpost:
Q3: in an embedded env with 1MB heap footprint restriction, you need to keep some 50 payload objects in a data structure, but these 50 objects already need 750KB, is arraylist or linked list better?
Q3b: can you reduce the footprint of the linked list? XOR?

Q: legacy code has MyThread.java extending Thread.java and MyRunnable.java implementing Runnable.java...

Q: Your Person.java object needs to be in a hashtable and searchable by two key objects (say Address object and Name object)

Q: c++11 auto keyword .. drawback?

Q: your FIX order is acked by exch; you send an order replace msg but not acked; you get a partial fill; what's the order state now?

Q: inter-thread comm? 
%%A: database; volatile fields; single shared object; exception; concurrent data structures; wait/notify
--new blogpost: %%%ringBuffer of pre-allocated objects to prevent GC
[category SDI]

Goal -- to eliminate GC completely.

I will want Order.java to use primitive fields and avoid reference fields, so the total footprint of an Order is known in advance. Say it's 100 bytes. I will pre-allocate 10M of these in an Order array... about 1GB footprint. Then i need a few subscripts to identify the active region + released slots therein. 

Ring buffer is good if the object lifetimes are roughly equal and we get FIFO. Otherwise, we may need a linked list of released slots in addition to a pair of subscript to identify the active region.

It might be better to allocate a dedicated buffer for each thread, to avoid contention.
--
Q: in java, can I have embedded fixed-length char-array field in my Acct object, rather than a separate array allocated somewhere off-site?

If not, I would need a giant char array that holds all the sub-arrays. Then I need to use a single int offset to identify one sub-array. Every Acct object has an this.offset.
--no blogpost
i don't need high salary so badly, so what's the real reasons why I sacrifice so much to re-enter U.S.?
rebuild confidence about career/finantial foundation over 25Y, since my passive-income/asset/burn-rate profile is far from comfortable
rebuild self esteem.. stigma?

--update blogpost on meaningful endeavors for family well being
competitive strength in speed coding contest -- such contest are now far more prevalent and the skills are definitely more valued 
competitive strength in dStruct/algo beyond the classics
competitive strength in core cpp QQ
competitive strength in core java QQ -- bigger job market
competitive strength in socket QQ
competitive strength in SQL QQ and perl GTD -- better than swing 
competitive strength in math in school -- huge and long-term impact
competence in localSys -- no long-term impacts, so Ashish's t-investment is unwise
improvement in yoga and fitness

In each case, you build up competitive strength over J years but may lose it in K years. Each strength has very different long-term impacts, not "zero" (transient) as we sometimes perceived them to be.

Valuable resources are scarce and is a competition. Therefore this competitive profile has long term impact on health, mental aging, stress level, job choices, commute, amount of annual leave.

Any higher ROTI?

You can say every woman's natural beauty has imperfections when you see that woman everyday. This is because our idea of perfect beauty is based on paintings and photos, not live humans. Similarly, every endeavor's ROTI has imperfections compared to our naive, idealized concepts.

If you look for imperfections you will always find some.... but such fixation on imperfections is cynical, demoralizing and unproductive research

Need to zoom into my strategic strengths + long term interests such as low-level, theoretical stuff, pure algo, dstruct, and avoid my weaknesses 

low level QQ -- my strength
low level investigation using tools + codebase -- my weakness
picking up new GTD challenges -- my relative weakness
picking up new IV topic -- my relative strength

--new blogpost: Ashish's promotion: Kyle discussion
The financial reward is a big but not the only reinforcement of absorbency, engagement, sustained focus. Those who commit to localSys are rarely promoted, as explained in numerous blogposts. GS was a watershed defining experience in my career. #2 experience is probably Stirt. Since big bonuses are utterly unreliable, FTE career is comparable to a contract career financially, but inferior in terms of stress, self-esteem etc.

As Kyle pointed out, there must be some intrinsic motivation in the Ashishes and Rahuls. "Traction" and "engaging" are the word. 

I feel Ashish commits more personal energy than his colleagues do on localSys because he derives some joy.

I commit more personal energy than other candidates on QQ (and to a lesser extent coding drill) because I derive some joy.

Given a choice between localSys xx vs QQ (or coding drill), I would not choose localSys, because of accu. 

--new?
my tsn ambition/dream is largely constrained by risks:
* stigma/respect
* figure things out faster than colleagues

For these specific risks, my current risk tolerance is higher so I ought to be bolder.

Note these risks exist with/out tsn. If we want to minimize these risks we need to find a low-calibre team like RTS, or OC (95G?)

--new blogpost: java perf^simplicity
Paradoxically
java's syntax simplicity is on par with python, better than c# and much better than c++.
java's performance is on par with c# and c++, largely due to JVM and JIT

java has been popular on web servers, and crucially the newer mobile, cloud, big-data platforms, beating c++, c#, python

java's adoption rate as a foundation platform or integration-target... is better than other languages. Many products are built for java, on java or with java in mind. I'm deliberately vague here because I don't want to spend too much time analyzing this vague, general observation.

--new blogpost
tags t_churn
My thick->thin insight into c#, SQL, swing, quant ... are not needed at present. Future? How about my current heavy t-investment in socket, TMP, c++11, python ...?

Focus today is ROTI, NOT about churn. Socket, SQL, core c++ are actually the best-performing tech bets in terms of robust demand and shelf-life. 

If you stay within core java (like XR and many friends), then you don't need to learn these other skills, but are they better off now? Dimishing return in ROTI?

I think it's impossibly hard to keep keep up ROTI. I can aim for accu, thick->thin, cross-pollination, churn resistance, sustained focus, traction, engaging, ... but ROTI is still underwhelming.

ROTI is a huge "deflator" of my enthusiasm, motivation, absorbency.. I think I need rational expectations.

Among the biggest 10 branching out (tsn) from java/SQL/perl , I still favor c++/socket/py/mktData.

--new blogpost
if I were a mgr like Miao in a bank, I would feel ..

my value-add is tied to this firm and not portable compared to a techie

I got to this position by building local relationships, learning the localSys and local workflow
.. so it's hard to be confident about repeating the same at another firm

competitive pressure from younger managers

--new blogpost:
I used to feel I ought to "plowback" for zbs and GTD, not only for IV. Now after working for 20 years, I now believe ANY tech knowledge, accu, deepening/stack-up ... has no leverage and basically worthless if not relevant to IV. 
* GTD skills? dominated by localSys. Tool knowledge can help but localSys is 10x more imporant.
* BestPractice design? Almost never mattered in my career. After EMPWorld, I have never risen to decision-maker level.
* BestPractice implementation? mostly a matter of personal preference by the manager
* zbs? Consider the classic books like [[Pearls]]. If not relevant to IV then this zbs is only for self-satisfaction

This is one reason why my reinforcement loop completely broke in Singapore. My NY years were filled with self improvement driven by interviews.
--new blogpost: delights: engaged, leverage, strategic.. 
[tags t_othRisk]
I feel my expectation was invariably too high in terms of strategic value, therefore underwhelming. (engagement ... expectation was moderately too high) Against this backgrop, there are little delights, but stigma/respect (not salary!) was too huge as a factor and overshadowed those little delights. For a perspective, please look at the spreadsheet "predict next 3-5Y job satisfaction"

I chose a python job at Macq .. engaged for a few months, to my delight
I chose the c++ job at RTS .. engaged for 6 months, to my delight. 
* Reason: traction in interviews and also in GTD and zbs
* Reason: interviews
* Reason: socket QQ was in-demand
* Reason: QQ discussions with colleagues .. visible progress

Both job decisions produced good/superior leverage over 5Y.

I chose a c# job ... engaged for a year and then disengaged, shorter than expected. Leverage was good.

I chose a Quant dev job ... engaged for a year and never disengaged. Leverage was underwhelming.

I chose a c++ large scale eq OMS job ... engaged for a few months. Leverage is unknown
--new blogpost: c#^java/c++ journeys
my c# xx journey was exciting for a year but .. In contrast, my core-java/c++ (not jxee) journey has generated superior ROTI because 
* the interview topics are stable 
* I was able to stick to these career directions

However, most of the java5 new features are out of fashion in interviews. How about j8 features?

leverage? c# is lower but not bad. See separate blogpost

--new or update: long-term orgro=elusive
long-term orgro is elusive. Biggest success I can think of is c++ (thanks to lots of IV) but in terms of salary increasae, I can't think of any... perhaps quant dev

swing -- rare engagement + orgro but abandoned !

c# -- i made sacrifices for deep-dive, and in return experienced rare engagement + orgro. I have since given up the direction, as c# is not so relevant to my current direction.

--no blogpost: I actually felt good receiving low salary offers like Baml-repo, Nasdaq and NCS
Somehow it confirms my value-add to the economy, my "health condition" 
