--new:
I think some coding problems are perceived similar to basic java knowledge. A self-respecting coder is expected to know all the "easy" problems.

As such, we need memory refresh ..

--be positive about next job?
jobSatisfactionPredictor shows most of the factors are negative.

--one-long-job resume can look unattractive for career changers
I always felt my job-hopper resume is a liability, but west coast shops don't care

--update ranking of stressors
low hit rate of cv is a pain but a much smaller pain compared to other pains

--ideal job
150k or even 140k
Low pip risk
.contract
.Low calibre colleagues like oc n rts
Acceptable domain .. vague!
acceptable mainstream tech like javascript, not GO not Qz

--no blogpost:
Since I don't need to worry so much about cash flow .. close to ffree, what jobs would I enjoy?
* impact? Not really important to me
* OC type of easy job with plenty of spare time?
* domain: devops?
* domain: quant dev, with low churn? 
* domain: inet? impactful but high-churn... not more enjoyable than my recent jobs
* domain: mkt data? impactful, low churn but not more enjoyable than other jobs
* mvea type of job
* RTS type of job -- familiar routine
* MLP type of job -- challenging... provided I can live in peace with PIP

--no blogpost
I feel my sister and my son may be more effective. 
perhaps I have an adjustment problem -- frequently I outperform in IV to set up expectation, but on the job struggle to match it, and receive negative feedback. 
The problem is my reaction to the feedback. 
I feel I can do better. I can learn coping strategies. 
I can relax as grandpa suggested. 
I can learn to live in peace with the negative feedback. 
If I put in a reasonable effort and manager accepts it without a bonus, then I feel I can be happy. 
If I put in a reasonable effort but manager clearly indicates "unacceptable", then I feel i would take action to leave

Overall, my reaction to PIP is weaker than my reaction to IV setbacks.

Traditionally, one of my strengths is positive attitude to IV setbacks.

It is easy to look at the gap and feel hopeless.

Parenting also requires this capacity. [[Learned optimism]]] listed Permanent as one hallmark of pessimists.

--new:
Only routine python code is "transparent". Many python features are impenetrable: 
* import hack
* namespace/idic
* yield
* reflection, meta-programming

--tsn is romanticized. Seldom worked out as planned? 
Cpp yes
Eq trading engine ? Not sure

--update blogpost on c++tmp
Alexandrescu's TMP techniques (not "designs") are very tricky (not "complex") and requires absorbency, but do they enhance latency?
Do they get you higher jobs, lower stress? 

In terms of latency, Well, java can rival c++ in latency. The reasons are not obvious or intuitive, but not my focus today. It's just an observed fact which discredits conventional wisdom and our assumptions.

QQ? Will C++TMP (and rvr) QQ turn out similar to java bytecode engineering, reflection, generics, EJB (spent 6M)? Even in such a case, still better roti than Qz. Actually TMP is quizzed more than those, and rve is quizzed more than TMP.

When TMP is not quizzed you can still showcase your Halo. TMP techniques would remain a halo for years to come. Classic QQ topic.

TMP is more time-honored than many c++11 features.

TMP is needed when reaching next level in c++ zbs. Many new cpp features r added for TMP. I feel TMP is the main innovation front across c++ language n standard development. cpp lost many competitions but no other languages offer anything close to these TMP features.  

TMP is never needed in greenfield projects. Occasionally relevant in understanding existing code base

--pretty women have easy job search .. similarly I have an easier job search

--no blogpost
GregR told me the high-end python interviews were more selective than java interviews. I think the reason is same as west-coast coding interviews --

The high-end employers want to pay high salary only to qualified candidates.

It also explains why ibanks ask crazy QQ questions about java/c++, latency

--update blog ... csy:
the IV successes define me.
Without these successes, I am likely to feel a total failure and worthless, probably more than once a years -- self-knowledge.

--no blog
java - exceeding my expectations in the churn. Found 2nd life in web2.0
c# - underwhelming. Displace in web2.0. Google CIV uses 5 anguages, without c#
c++ - matching my expectation. slow decline. Efficiency advantage is eclipsed by java and some new languages
py - exceeding my expectation
javascript - exceeding expectation

--update blogpost on ## self-esteem
Looks like every venture out of my tech sweet spot java/SQL/scripting... presents esteem-hazards (like health hazards) but dismal prospect in terms of self-esteem boost.

high-risk, low-return venture?

The health hazard is really nothing but one mgr's assessment. For my recent painful jobs, I continue to dismiss/ignore the possible boost to self-esteem --
* I conquered some of my biggest technology fears -- MSVS; c++ crash management; c++ large code navigation.. Other people may not agree, but my own experience proves that these challenges are harder than high-level dev (like web/scripting..). My fears were more deep-rooted.
* I built real mileage in c#. I even proved myself stronger than some c# veterans when I created a simple web server to dump log files for everyday troubleshooting.
* see more pointers in https://bintanvictor.wordpress.com/wp-admin/post.php?post=27139&action=edit

--new blogpost: avoid hot domains that attract young competitors
I feel clearly less in-demand as I age. 
Perhaps I should shift towards domains that young guys avoid -- like c++/coreJava, back office, startups, lesser-known banks

telecom?

see also blogpost on 150k FTE@light load

--no blogpost:
Quoine probably designed a tcp feed for internet clients, but in the industry, multicast feed is more industrial-strength, more advanced, more practical. Such expertise is more in-demand 

--no blogpost: delights: engaged,leverage,strategic.. 
[tags t_othRisk]
I feel my expectation was invariably too high in terms of strategic value, leverage and ROTI, therefore underwhelming. 
(engagement ... expectation was moderately too high) 
Against this backdrop, there are little delights, but stigma/respect (not salary!) was too huge as a factor and overshadowed those little delights. For a perspective, please look at the spreadsheet "predict next 3-5Y job satisfaction"

I chose a python job at Macq .. engaged for a few months, to my delight
I chose the c++ job at RTS .. engaged for 6 months, to my delight. 
* Reason: traction in interviews and also in GTD and zbs
* Reason: interviews
* Reason: socket QQ was in-demand
* Reason: QQ discussions with colleagues .. visible progress

Both job decisions produced good/superior leverage over 5Y.

I chose a c# job ... engaged for a year and then disengaged, shorter than expected. Leverage was good.

I chose a Quant dev job ... engaged for a year and never disengaged. Leverage was underwhelming.

I chose a c++ large scale eq OMS job ... engaged for a few months. Leverage is unknown
--Some of the MLP connectivity guys could be a top geek to achieve the latency. This geek could have left the team.

--update blogpost on absorbency
absorbency is more precise than 'effort'
absorbency is more about capacity, less about attitude, motivation

--no blogpost: c#^java/c++ journeys
[tags t_below7]
my c# xx journey was exciting for 6M before OC and in first year in OC. In contrast, my core-java/c++ (less for jxee) journeys have generated superior ROTI (elusive) because 
* the interview topics are stable 
* market waves steered me to stick to (not abandon) these career directions

leverage? c# is lower but not bad. See separate blogpost

For all languages, there is no hike, no strategic value so at that level all underwhelming
--no
Like Black developers .. As an older developer I also have higher visibility.
IFF I apply myself (localSys) and establish a foundation at a new site as Piroz does, I think I could survive and possibly show my hidden strengths.
