--update blogpost on array^ptr
The equivalence is strongest in argument passing. An array ptr degenerates to a ptr parameter. When you pass an array as an argument, it is nothing but a pointer.

However, passing vector (or std::string) is very different. 

-- new: free() and footprint@PID
If malloc() allocates 16M, then free() would (use the bookkeeping info to) return the same amount of memory, usually to the free list. The free list is managed by the DMA library and private to the current process, not shared with another process. 

[[Understanding and using C pointers]] points out that this 16M is not returned to the host OS and available to other processes. Therefore, the memory footprint of the current process doesn't reduce due to free().

--update invalidation rules:
[[c++coding standards]] P150 says node-based containres can minimize iterator invalidation

-- update blogpost on VLA
Both the non-standard alloca() and the standardized VLA are similar -- allocate in the stackframe of current block, and automatically bulldozed.

If you need an array of runtime-specified size, then malloc() is an older alternative to VLA but key difference is deallocation. Like alloca(), VLA has automatic storage so deallocation happens automatically at end of block. 

sizeof on VLA executes at runtime. 

Usage scenario of alloca()? You can use it in a thread-start function. 

-- new: string pbref^pbclone: cpp++
In java and c#, string objects are always passed by reference. 

An extreme example is instructional ... consider a huge string object with 999 trillion characters. In java and c# this object is passed around without an expensive cloning process.

In C, a cStr is an array, either on heap or elsewhere. It is usually passed by pointer (pbref). Pbclone is fairly common when the length is small. In C, string length is usually known in advance. 

In C++, std::string is usually pbclone but it can be pbref. Overall, Passing std::string is more complicated than in other languages. 

Inside many c/c++ structs I have seen, small string fields are often represented as a fixed-length char-arrays without terminating null char. Note compilers require that fixed length to be a compile-time constant, to support sizeof(). I think this design is industrial strength. It is based on a widespread "KnowYourData" principle. The string lengths should be fairly consistent and the max length known in advance. 
An alternative design would use a std::string field. This is feasible, but not popular. There are many subtle complexities
* copying would clone the string
* dtor would destroy the string along with the char-array on heap
* someone will try to get the address of this string field and pass it around. No such complexity exists in the earlier design.

-- update blogpost on IPC https://stackoverflow.com/questions/14973942/tcp-loopback-connection-vs-unix-domain-socket-performance shows that UDS outperform loopback TCP sockets

--update the 7 requirements of late binding in c++
the virtual function's call site is NOT inside a ctor/dtor

-- new: multiset, multimap
In multimap, one key maps to a bag of payloads. As in any map containers, the payloads can be duplicates. In the multimap context, the group of payloads for key1 can also be duplicates.

I think a reasonable implementation is {keyObject -> list of payloads}

In multiset, multiple distinct payload objects can appear equivalent. They could differ by non-essential attributes like creationTime. 

Some people assume multiset can be represented as {keyObject -> count}, but such a container can't hold two equivalent-yet-distinct keyObjects. When I iterate the multiset, I want to see the distinct creationTime values, so all the indivisual payload objects must be saved.

I think a reasonable implementation is treeSet{list{payloads}}.

-- update: https://btv-gz.dreamhosters.com/2009/12/11/pureconcrete-virtual-functions/
Pure virtual dtor is one standard idiom to ensure the host class B is abstract. To use this class you must instantiate a subclass D.
[[moving from c to c++]] P404
A body of this dtor is still required at runtime when a D instance is destructed, so you must provide a definition for ~B() but keep this dtor pure virtual. 

Q: How is such a concrete pure virtual different from a concrete virtual? 
A: subclass D inherits a pure virtual dtor and must concretize it to become a concrete class.

-- new: NIC, 4 little dragons
The original term "Newly Industrialized Countries" referred to these 4 east Asian economies

The current list is very interesting.

South Africa is the only NIC in Africa.
Mexico and Brazil are the only two NICs in Latam, probably leading economies
Among BRIC, only Russia is not an NIC.

Asian NICs are mostly in SEA except China and India. So in Asia, the rich list has Japan on top, the 4 little dragons below it, then SEA, then China and India. The rest are nowhere. My view is similar to the Flying Geese paradigm.

-- new: whenever you notice "private" keyword, think of "friend". Private/friend are an inseparable pair of keywords.
Similarly, every time you see "cosnt", think of const/mutable pair. Inside classes, private is more useful than const.

-- new: wrapper struct over container elements
Sometimes I need to construct a wrapper instance holding some kind of stable reference-to-element-in-container.

Do you want to hold raw pointers to the element?
Do you want to hold smart pointer? No!
Do you want to hold subscript into the container?
Do you want to hold iterators into the container?

If subscript is stable, then I think it is the cleanest design. This would be the case for array-like containres that are somehow constrained to avoid deletion/reallocation.

The problem with a pointer field is ... a can of worm. Whoever reading the code would brace themselves because a pointer field often entails ownership, clean-up, customized copy operation...

The iterator solution is more advanced, can be viable iFF the iterator is guaranteed stable. That depends on the iterator invalidation rules. (See https://btv-gz.dreamhosters.com/wp-admin/post.php?post=15251&action=edit ) I think the advantage is itr-based insertion into the host container.

-- udpate https://btv-gz.dreamhosters.com/2009/05/13/c-exception-handlers-global-var/
c++ exception specification is removed in c++17. Remember that any exception unlisted triggers "unexpected". Those features [set_unexpected(), unexpected_handler] are also removed.

std library removed bind1st etc, binary_function etc in c++17

See https://mariusbancila.ro/blog/2018/07/05/c17-removed-and-deprecated-features/

--new or fuxi: c++ range seems to borrow from python q[yield]. (I guess c# [yield] may be similar but I don't have time to study it.)
However, c++ range, as a STL extention, seems to rely on an underlying container.

ranges are based on iterators/containers. 

The infinite range doesn't rely on a container but seems to be a secondary feature.

Will C++ range become IV-hot? If it does then I will study.

-- new: closest ancestors of c/c++
For c++
#1 is C
#2 is Simula

For C #1 is the B language
