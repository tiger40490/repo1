-- update post on array^ptr
a ptr Object can be reseated to point to an array.
An arrayName (is not an object) can't be reseated. It's a compile-time constant.

-- new or fuxi: java: big lambdaEx^methodRef
I think a big lambdaEx (lambda expression) is usually used as an argument to a method. 

Q: can we convert the big lambdaEx to a method reference?
A: not alwaysl. In Dropcopy framework, I realized that 

* many times yes I can and should convert. LambdaEx is designed for small code blocks.
* however, if the lambdaEx uses captured variables, then conversion can be difficult. I think the new method has to add a new param for every captured variable.

-- new: tips@futures contract month codes
M/N sound alike .. June/July look alike.
F: FFFirst month
U: my UChicago program started in Sep.

The quarter month codes are more important: H:March, Z:December etc

-- new: py package dependency mgmt
to reveal all precedents and dependencies of an high-level pip package 

pip show langchain

If you have some unknown number of dependencies removed, then you can fix it with this 3-word command:

pip install langchain

(langchain package has a requirements.txt.) The command will check requirementstxt, detect any dependency that's already satisfied and skip them.

-- update 
clean price is quoted price. Quoted price should not change every day due to acrued interest. That change is a noise that traders don't want to see.

dirty price is "the actual price" with many digits, used to compute actual PnL.

-- new: perl regex tips
to evalute int($2) - int($1), you can use
s/(whatever)...(whatever)/$2-$1/e 

Must not use \2-\1

to match a run of the same letter /(\w)\1{2}/  # trio
-- update or new: 2D-array ptr type
If via malloc then we get an int ptr

if declared as static 2D-array, then we get a ptr-to-int-ptr i.e. double ptr
How about a jagged 2D-array? Same double-ptr

how about a shared ptr to a 2D-array? I think it's same as shared_ptr to a 1D array, both allocated via array-new. Note this features is unavailable before c++17. 

-- new: wrapper struct over container elements
Sometimes I need to construct a wrapper instance holding some kind of stable reference-to-element-in-container.

Do you want to hold raw pointers to the element? No as elements can be relocated.
Do you want to hold smart pointer? No!
Do you want to hold subscript into the container? Yes if stable
Do you want to hold iterators into the container? No.

If subscript is stable, then I think it is the cleanest design. This would be the case for array-like containres that are somehow constrained to avoid deletion/insertion. Basically a stack-like container.

The problem with a pointer field (in wrapper struct) is ... a can of worm. Whoever reading the code would brace themselves because a pointer field often entails ownership, clean-up, customized copy operation, stray pointer, pointer reseat ...

The iterator solution is more advanced, can be viable iFF the iterator is guaranteed stable. That depends on the iterator invalidation rules. (See https://btv-gz.dreamhosters.com/wp-admin/post.php?post=15251&action=edit ) I think the advantage is itr-based insertion into the host container.

-- new: basis_risk
P53 [[fundamentals of Fut and Opt markets ]]

-- update blogpost on fwd^fut https://btv-gz.dreamhosters.com/wp-admin/post.php?post=41694&action=edit
P40 [[fundamentals of Fut and Opt markets ]]

-- update one of the 4 blogposts on IRS valuation
P170 [[fundamentals of Fut and Opt markets ]]

-- update blogpost on tibrv wrappers
py, node.js, perl (my first encounter), java, c# ... all can somehow operate at a low level such as sockets, shared memory, semaphore, memory fence...
However, they rely on the underlying C API, which is either a system library or related to the kernel.

The amount of programmer-control is better in C, as C is a naturally low-level language, designed for "system programming". Those supestructure languages (including c++ class libraries) use wrappers over C. 

In these cases as in the tibrv wrapper, the market value of the C knowledge is higer and more time-honored. The API in C has a very stable evolution.

Most technical discussions over the decades would also focus on the common API in C.
