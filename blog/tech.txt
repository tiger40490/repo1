--value-based types
Optional is the only important type we know.

One of the main ideas about value types is that they have no notion of identity (or perhaps their identity isn't detectable to Java programs). In such a world, how could we tell whether a and b "really" are the same or different?

Q: why avoid locking on value-based objects?
A: https://stackoverflow.com/questions/34049186/why-not-lock-on-a-value-based-class

c++ lacks this level of community and collective brain power 
--new: why avoid locking on boxed Intergers
https://stackoverflow.com/questions/34049186/why-not-lock-on-a-value-based-class section on "UPDATE - 2019/05/18" has a great illustration

Auto-boxing of "33" may produce distinct objects each time, or the same object repeatedly. Compiler has the freedom to optimize, just as in c++.

--new
intellij (even the community version) is much cleaner than eclipse

The most popular tools are often vastly inferior for me. Other examples:
* my g++ install in strawberryPerl is better than all the windows g++ installs
* my git-bash + g++ is a better IDE than all the fancy GUI tools
* wordpress beats blogger.com hands down
* wordpad is a far simpler rich text editor than msword or browsers or mark-down editors

--new: 
one of the most obvious and real limitation/obsolete features of c++ as a language is the tool chain.
Part of the ecosystem
Too complicated compared to newer languages like java. The dynamic scripting languages are even simpler

Also an entry barrier. Young people can take it up if determined, but majority of them are put off. 

There's a minimum mileage required. Many young people don't stay on it long enough. 

My vi mileage is also too short.

In my early days using c++, I tried to set up eclipse CDT and spent lots of time on the tool chain. My goal was to set up similar convenience ... Futile. Not worthwhile. java tools are much better. Most c++ programmers don't bother with such convenience and rely on command line tools.

Similarly, yoga is hard for most people but some individuals are determined and can overcome the initial hump (6-24M) and find joy and reward

--low latency: avoid dynamic data structures
In my first programing job, I used C without malloc, because I used only array + struct. 

If my collection were to grow, then I would have needed DAM. 

I feel low latency generally avoid mid-day DAM. If DAM required, then pre-allocation is preferred.

--GS-HK interviewer said with an array-based order book he could achieve 1 million updates per second.

This is in response to my claim that Rebus is 700K MPS.

Martin Thompson basically said if the performance is good enough for the requirement, then no need to go further.

--microsoft acquired Mono project and produced dotnet core (Sunil) as a jvm challenger to run on non-windows platforms

--java community support is better than c# or c++
higher collective brain power
--cloud: golang and java are the most popular languages
--bigData: java is possibly #1
--ML: java is 2nd or 3rd