-- new
Adaptive (a finIT firm) have worked within many banks and used all the mainstream messaging middlewares available in the industry. Experience has taught us, that peer-to-peer messaging system is more flexible than broker based messaging systems and requires less operational overhead. You donâ€™t need additional servers (or hardware appliances) to use it, which are generally organised as shared infrastructure and become an organisational bottleneck for development teams.

-- update ..
Inter-thread-communication can use an atomic var. Usually a very simple type like bool or short integer.

EffectiveModernC++ has an example.

-- new:
If a pull request branch can't be rebased onto master, sometimes it can be squash-merged.
Need to understand what rebase means..

-- new:
c++/c#/java//// online compiler: https://wandbox.org/

-- update bpost on defaultdict
(lambda:...) is always more flexible, more explicit

-- new or update: detect stuck thread in a pool
weblogic marks a pooled thread as stuck if it is busy for 10min (configurable). Weblogic is designed for a large patient queue, so each patient should not take 10min.

For a custom application, this doesn't work. A thread can be busy and productive for any amount of time.

Purpose of detection is not per-patient intervention. Purpose is hospital mgmt such as thread pool config, memory increase, or load balancing.
-- new: patient Q
good metaphor for thread pool and producer/consumer. The patient queue can be 60,000 in a reasonable design (Weblogic)

-- new: check a commit is already in master
The problem: when a branch is merged into master, a brand new hash would be generated. 

So we can't look for the hash of the original commit. Instead, we can use a combination of {commit msg, timestamp, committer}. These items are preserved by the merge engine.

If these things match between 2 commits, then there's basically no chance they are actually different.

git log | grep -B3 'the needle commit msg'

-- fuxi:
if a window dosesn't show up even though it is on the taskbar, then it's hidden somewhere. You can press control-shift and rightClick on the taskbar item.

-- new: deepcopy
copy.deepcopy() is never quizzed, but is a key ECT feature in CIV. It's fairly easy to use, and seldom requires any tweaking/troubleshooting.

Once a while, we can showcase our python expertise by drawing attention to deepcopy. It solves two common problems of object graph cloning, using a memo object.

Deepcopy is somewhat related to serializer "pickle" module.

Your class can implement def __deepcopy__(self, memo). In it, you can deep clone a component2 using deepcopy(component2, memo).

Standard module doc is concise and readable.

-- new or update on signal+socket
signals in windows? not popular

real time signals are a new Posix concept... not really low-latency. 
Low latency sockets don't rely on signals for immediate action

Many signals are self-sent from the same process. I think timer alarm is one example. Sockets is another example. However, keyboard signals like Ctrl-C are not self-sent.

Signal is designed to be asynch, seldom immediate, though the scheduler may preempt whatever is running and give the next time slice to the signal's target process sooner than normal.

One of the most common signals is SIGSEGV. The default signal handler function performs a core dump. There's no process to preempt. However, the current process may not check its signal table until some instructions later, and then run the signal handler.

-- fuxi: closest ancestors of c/c++
For c++
#1 is C
#2 is Simula

For C, the #1 is the B language. It explains the naming of "C"

-- new: a few minor criticisms of c++
An obscure but simple shortcoming of c++ lies in the iostream. There is a shared mutable global state in the global variables cout (and cerr). Every call to setXXX would permanently update the global state until updated again.

iterator invalidation .. a common gotcha

private methods are exposed in class header files.