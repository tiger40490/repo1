-- GST IV: some topics 
byte-level parsing. WebAssembly encoding scheme supporting variable length strings... I mentioned protobuf

IPC.. I mentioned file; DB; distributedCache; sharedMem. He mentioned local sockets

What' the matching engine throughput you achieved? I said 10 TPS with database .. Without database perhaps 1000.

persistence of order state on the critical path? If async write-behind, then what if you lose power after sending the order, but before persistence? I said there's always tradeoff. Even with RDBMS level of ACID support, you may still need redundant writes which adds even more latency.

disaster recovery process in RTS and in EPA

retransmission, gap management

How do you benchmark your app? I gave a fairly detailed real answer :)

Why such small memory footprint?

..c++ questions
how is template implemented in c++
nm .. what if nm complains about a missing shared lib, but the file is in your local file system?
What are the underlying differences between static and shared lib?
What TMP techniques did you use? I mentioned CRTP. I was frank. I believe if you aren't writing library, then no need to incur the complexity cost of TMP. If I do write a library with complex usage requirements, then I will google to find out when to use which TMP technique.
What's enable_if. I correctly associated it with sfinae
-- top 2 features of blockchain: 1) immutability 2)consensus among descentralized participants

--new: raii for array-new
std::vector ! see [[safeC++]] chapter on safer array
-- update
source .bashrc # executes each command from the rc, all within the current shell.
exec bash # starts a new shell, with an empty command history 

-- new: java simplifying concurrency
concurrency is tricky. Java tries to simplify concurrency. It did simplify many things such as mutex usage, thread creation,,, but I would say it's superficial simplification.

It reduce complexity level from 9 to 8.5.

Note java concurrency is OO-concurrency. Across all languages, OO-concurrency is usually a wrapper, because core concurrency libraries, concurrency constructs.. are always written in C , at a lower level, not OO at all.

-- new or fuxi:
listComp, lambda, interactive shell ... have something in common: the Expression part is the centerpiece. It creates a return value.

-- new: set in python
set is the least used builtin container. I seldom use it, becasue dictionary is more useful.
( Similarly, list is always more useful than tuple, except when used as dict keys. )

One advantage of set over dict or list -- set-comprehension to create a hashset

-- update blogpost on java functors
Only in java is the rule very simple and clean -- FCC functions passed into a HOF must be objects.

c++, c# and py are more flexible and less simple

-- new: java Future::cancel(boolean mayInterruptIfRunning)
java Future::cancel(boolean mayInterruptIfRunning) would probably use interrupt to cancel a running thread.

If the boolean arg is false, then the thread is not interrupted and would continue running.

I think pthreads define cancellation points, similar to java's interrupt points.

-- fuxi: uniqPtr MktVal imt sharedPtr
.. due to move-semantics, which is a hot favorite IV QQ topic

-- fuxi: precedence: NOT > AND > OR
Proposition 1: Dinosaur existed
Proposition 2: speed kills

Not P1 AND Not P2 means (Not P1) and (Not P2), with or without the parentheses.

Same in any language.
-- fuxi
in GMDS, catcha mail .. a greenfield design needs to focus on the show-stopper aspects like crashing, instrumentation.

latency is not really a practical focus.

-- fuxi: These new "infrastructure" technologies are not reliable and fooolproof as traditional infrastructure technologies.
eg(big): wordpress block editor
eg: show-stopper: oversensitive touchpad 
eg: show-stopper: home wifi issues
eg: github new policies
eg: wechat issues
eg: wordpress take-down notice
eg: windows license expiry
eg: windows update kick-in at the wrong time
eg: Citrix issues
eg: M1 and starhub blackout

-- fuxi: java 5 and java 8 are the two releases most quizzed in interviews.
How about java6/7/9? They introduce rather few visible changes. 

In fact, beside generics, java5's other changes are hardly visible. There are many additions in concurrency library but invisible/irrelevant to most developers.

--fuxi
signals in windows?

real time signals are a new Posix concept... not really low-latency.

Most signals are self-sent from the same process. I think timer alarm is one. Sockets is another example. However, keyboard signals like Ctrl-C are not self-sent.

--update on placement new
I think placement new has two distinct usages
1) for data types with a ctor, it lets you construct those objects (or arrays thereof) at a given heap location without malloc

2) for primitive types like int, it informs the compiler to treat the raw memory as "int", without malloc.

2b) If you call placmeent new with an initializer then it also performs initialization at a heap location without malloc

--fuxi: sys call is not always hardware related. my linux book has a section on sys calls related to signals!
--fuxi but no point publishing:
To find a windows service name

  sc query > some.log

To fine the pid of the service name

  sc queryex WinDefend

  taskkill /F /PID 4168
  
--fuxi
Now I realize BFT is by level i.e. visit order is root to leaf. DFT is bottom-up

--new untitled
95G offer service used tibrv to send updates to GUI. Robust and fast. 
(MLP also uses messages to update GUI)

Also there was one dedicated daemon instance for each trading account. Sounds inefficient but actually acceptable scalability.

--fuxi:
Citrix became very slow when I moved to a location far from the wifi hotspot. I could see the signal strength dropping very low.

--fuxi: JVM remote debugging is not so foolproof.
GDB is not so foolproof. See my blogposts.

We need to fully embrace the reality that live debugging is often impractical.

In contrast, "echo" is the gold standard in code tracing.

--fuxi: 5GHz ^ 2.4GHz wifi
Range favors lower frequency. Bigger homes may need it.

bandwidth favors higher frequency. Video streaming.

Overcrowding in 2.4 can cause intermittent connectivity issues, but is it 5% of the time or 0.05% of the time? Not sure. Microwave did hit me.

--new: malloc != syscall
is malloc a kernel service, syscall or a userland function offered in a regular library?

Can I implement my own DAM without involving the kernel? I would say some kernel sys call is needed.

Is there a cpu instruction for heap allocation? Does cpu care about heap vs stack? Yes the CPU cares about the stack.
whilst the stack data is managed via the CPU, the heap is not managed automatically. The size of the heap can also be considerably larger than the stack and the allocation of memory must be performed manually within a program. Memory also has to be freed manually, again unlike the stack.

Can check my linux book or google on brk()

--fuxi:Martin's low-latency java talk
My Questions
Q: for low latency should we avoid concurrency ?
A: yes
%%A: parallel processing in ST-Mode is good but avoid any form of synchronization 

Q: If I don’t use heap, and only use stack and static memory….?
A: heap allows sharing between threads

Q: why is JIT not available to c++?
%%A: c was not designed for JIT and ineffective 

