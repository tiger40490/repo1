-- new: basis_risk
Alex Tee of Stirt felt basis_risk is a basic common knowledge

P53 [[fundamentals of Fut and Opt markets ]]

-- update blogpost on fwd^fut https://btv-gz.dreamhosters.com/wp-admin/post.php?post=41694&action=edit
P40 [[fundamentals of Fut and Opt markets ]]

-- update one of the blogposts on IRS valuation
P170 [[fundamentals of Fut and Opt markets ]]

-- new convenient: pre-sized std::vector
First we had fixed arrays. Then we had VLA. Then we had malloc arrays. I think fixed-sized std::vector is the upgrade from malloc array.

It offers RAII clean-up.

It offers copy and move support, so you can pass it into/out of function.

See also [[c++coding standards]] P150

-- new: void pointer in C: primitive generic container
[[Understanding and Using C pointers]] P191 has a use case of a void pointer. Void pointers are rarely needed, so this is one interesting example in a reputable book. The use case is a generic linked list. 

In a link node, the payload is a (presumably heap) pointer. So sizeof(Node) doesn't include sizeof(allocation on heap). This way, the sizeof(Node) is known to compiler. I think java linked list is similar in memory layout.

There are "methods" (actually free functions) associated with the LinkedList struct... a basic class.

Encapsulation .. achieved with fwd declaration of Node struct and LinkedList struct in a shared header. Any user code would include the shared header and won't access the Node internals.

To use this linked list, ApplicationA could pass Account pointers as the payload. An unrelated ApplicationB could pass a Teacher pointer as payload. Both pointer types would match the void pointer type in Node declaration. 

-- fuxi: pointer usage in threading
In a C++ thread, a pointer could point to heap, to static memory region, to another call stack (another thread) or another stackframe on the same call stack

In java, pointers always points to heap.


-- fuxi
iterator comparison (beyond equality) makes sense only when the 2 values point into a sequence container.
The comparison is modelled after "pointer comparison" which is meaningful in an array.

You can subtract itr1 from itr2. The result is a difference_type. See https://www.cplusplus.com/reference/iterator/iterator_traits/ This is modelled after ptrdiff_t for pointer 

--fuxi: pointer to function is a C concept. You can use method reference in python. In all cases, there is a unique address to each named function. That address is in the text segment

-- BitMain
Q: in your java project, is memory an issue?

-- fuxi or new:
Signal is always asynch, never immediate, though the scheduler may preempt whatever is running and give the next time slice to the signal's target process sooner than normal.

One of the most common signals is SIGSEGV. The default signal handler function performs a core dump. There's no process to preempt. However, the current process may not check its signal table until some instructions later, and then run the signal handler.

--fuxi
signals in windows? not popular

real time signals are a new Posix concept... not really low-latency.
Low latency sockets don't rely on signals for immediate action

Most signals are self-sent from the same process. I think timer alarm is one. Sockets is another example. However, keyboard signals like Ctrl-C are not self-sent.

--fuxi: sys call is not always hardware related. my linux book has a section on sys calls related to signals!

-- fuxi: set in python
set is the least used builtin container. I seldom use it, becasue dictionary is always richer.
( Similarly, list is always richer than tuple, except when used as dict keys. )

One advantage of set over dict or list -- set-comprehension to create a hashset
