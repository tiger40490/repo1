--google drive cheasheet
The frontpage shows "quick access" list of recent files, completely useless and distracting. 

You can move one or more files -- select (filenames highlighted in blue) then right click -> move

Q: how to remove "quickaccess"

--container of polymorphic Animals (having vtbl); Nested containers .. 
There are many variations of "common practices" in c++ but in java/c# the best practice is nothing but a single choice. 

These dynamic languages rely on a single big hammer and make everything look like a nail.

This is another example of "too many variations" in c++

--fuxi: mlphone bb app settings
in any bb app, hit the bb icon at bottom right -> hit gear icon on bottom left -> per-app settings

--sugg: q[ nn ] and q[ commit --amend ] both to detect the current HEAD is also origin/.... Use commit hook
--fuxi: cpu set seems to be a linux feature, not just a container feature

--sched_setaffinity is a syscall!
all other *affinity* functions are based thereon

*_np in function name means non-portable

--Martin's low-latency java talk
Deallocation is worse than allocation. Deallocation may use locking if performed across threads.

My Questions
Q: for low latency should we avoid concurrency ?
%%A: parallel processing in STM is good but avoid any form of synchronization 

Q: If I don’t use heap, and only use stack and static memory….?
A: heap allows sharing between threads

Q: why is JIT not available to c++?

--pointer as a field of a class is uninitialized by default
I think Ashish's test shows it

However, such a field creates an opportunity for mvctor

--new: Q: why unlike java/c#, in my c++ jobs I seldom needed to learn ide? 
(I used msvs only for automated build since windows command line build is based on msvs.)

in my java jobs, i often need to spend lots of time learning the ide features.

--new: 
one of the most obvious and real limitation/obsolete features of c++ as a language is the tool chain.
Part of the ecosystem
Too complicated compared to newer languages like java. The dynamic scripting languages are even simpler

Also an entry barrier. Young people can take it up if determined, but majority of them are put off. 

There's a minimum mileage required. Many young people don't stay on it long enough. 

My vi mileage is also too short.

In my early days using c++, I tried to set up eclipse CDT and spent lots of time on the tool chain. My goal was to set up similar convenience ... Futile. Not worthwhile. java tools are much better. Most c++ programmers don't bother with such convenience and rely on command line tools.

Similarly, yoga is hard for most people but some individuals are determined and can overcome the initial hump (6-24M) and find joy and reward

--new: low latency: avoid dynamic data structures
RTS uses no STL containers.

In my first programing job, I used C without malloc, because I used only array + struct. If my collection were to grow, then I would have needed DAM. 

I feel low latency generally avoid mid-day DAM. If DAM required, then pre-allocation is preferred.

--GS-HK interviewer said with an array-based order book he could achieve 1 million updates per second.

This is in response to my claim that Rebus is 700K MPS.

Martin Thompson basically said if the performance is good enough for the requirement, then no need to go further.

--new: bcomp advantage over git-diff
* shows byte count in new vs old versions, useful in git blogging intra moves
* can hide minor changes
* shows char-level changes -- hard to see in git-diff

--fuxi: C continues to dominates in system programming
low-latency
sys calls
socket programming
pthreads

--fuxi: microsoft acquired Mono project and produced dotnet core (Sunil) as a jvm challenger to run on non-windows platforms

--fuxi: java community support is better than c# or c++
higher collective brain power
