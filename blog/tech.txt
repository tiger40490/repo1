-- new: c++ exceptions!=as useful as in newer languages
C++ has a tradition of UDB and USB. low level errors are often left to the hardware or the OS. See https://btv-gz.dreamhosters.com/wp-admin/post.php?post=954&action=edit
exceptions create pitfalls in dtor, swap etc
exception passing is trick and a major source of bug
exceptions affect efficiency and performance (the j4 C/C++) and is often disabled in gcc, or avoided. Ironically, when it comes to exceptions, arguably the most useful language feature is 'noexcept'.

.. C integration .. Many real world projects have substantial codebase in C, and often adopt C programming traditions.
C doesn't support exceptions. Low-level langages like C use error code. 

-- new: 
seg fault is an immediate response or async, based on signals?
Is core-dump performed by a signal handler?

I think my linux book has some details.
-- fuxi: uniqPtr MktVal imt sharedPtr
.. due to move-semantics, which is a hot favorite IV QQ topic

--fuxi
signals in windows? not popular

real time signals are a new Posix concept... not really low-latency.
Low latency sockets don't rely on signals for immediate action

Most signals are self-sent from the same process. I think timer alarm is one. Sockets is another example. However, keyboard signals like Ctrl-C are not self-sent.

--fuxi: sys call is not always hardware related. my linux book has a section on sys calls related to signals!

--new: malloc != syscall
is malloc a kernel service, syscall or a userland function offered in a regular library?

Can I implement my own DAM without involving the kernel? I would say some kernel sys call is needed.

Is there a cpu instruction for heap allocation? Does cpu care about heap vs stack? Yes the CPU cares about the stack. There are dedicated stack-registers in the CPU
whilst the stack space is managed via the CPU, the heap is not managed automatically. The size of the heap can also be considerably larger than the stack and the allocation of memory must be performed manually within a program. Memory also has to be freed manually, again unlike the stack.

Can check my linux book or google on brk()

-- fuxi: set in python
set is the least used builtin container. I seldom use it, becasue dictionary is always richer.
( Similarly, list is always richer than tuple, except when used as dict keys. )

One advantage of set over dict or list -- set-comprehension to create a hashset
