--q[ nn ] and commit --amend to detect the current HEAD is also origin/....

After pp, set a env var? but how do I reset it?

q[ nn ] to check the HEAD vs origin/... and simply refuse

--if I declare a huge int array in static memory, will the object file become huge?

This is possibly a QQ nlg pearl, a a halo zbs, not GTD

--mvctor for pair is field-by-field 

std::pair has no pointer field so I thought there's no meaningful mvctor, but in reality, the pair mvctor is defaulted i.e. each field is moved.

If a pair holds a vector and a string, then the vector would be move-constructed, and so does the string.

--cpu set seems to be a linux feature, not just a container feature

--sched_setaffinity is a syscall!
all other *affinity* functions are based thereon

*_np in function name means non-portable

--C continues to dominates in system programming
low-latency
sys calls
socket programming
pthreads

--Martin's low-latency java talk
Deallocation is worse than allocation. Deallocation may use locking if performed across threads.

My Questions
Q: for low latency should we avoid concurrency ?
%%A: parallel processing in STM is good but avoid any form of synchronization 

Q: If I don’t use heap, and only use stack and static memory….?
A: heap allows sharing between threads

Q: why is JIT not available to c++?

--pointer as a field of a class is uninitialized by default
I think Ashish's test shows it

--new
In spreadsheets, prefer '4~6' rather than '4-6' as the latter is taken as a date !
prefer ranking with a/b/c than 5/4/3 in excel due to capital-letter highlighting

--Q: why unlike java/c#, in my c++ jobs I seldom needed to learn ide? 
(I used msvs only for automated build as windows command line build is based on msvs.)

in my java jobs, i often need to spend lots of time learning the ide features.
--new
intellij (even the community version) is much cleaner than eclipse

My choice of java ide is based on
1) other developers in the team, as I need their support

2) online community support -- as most questions are usually answered there
I think eclipse beats intellij 

3) longevity -- I hate to learn a java ide and lose the investment when it disappears. 
I think eclipse beats intellij, due to open-source

*)other factors include "clean" 

The most popular tools are often vastly inferior for me. Other examples:
* my g++ install in strawberryPerl is better than all the windows g++ installs esp. msvs
* my git-bash + strawberryPerl is a better IDE than all the fancy GUI tools
* wordpress beats blogger.com hands down
* wordpad is a far simpler rich text editor than msword or browsers or mark-down editors

--value-based types
Optional.java is the only important example we know.

One of the main ideas about value types is that they have no notion of identity (or perhaps their identity is detectable only to JVM not Java applications). In such a world, how could we tell whether variables aa and bb "really" are the same or different?

Q: why avoid locking on value-based objects?
A: https://stackoverflow.com/questions/34049186/why-not-lock-on-a-value-based-class

c++ lacks this level of community and collective brain power 

--new: why avoid locking on boxed Intergers
https://stackoverflow.com/questions/34049186/why-not-lock-on-a-value-based-class section on "UPDATE - 2019/05/18" has a great illustration

Auto-boxing of "33" may produce distinct objects each time, or the same object repeatedly. Compiler has the freedom to optimize, just as in c++.

--new: 
one of the most obvious and real limitation/obsolete features of c++ as a language is the tool chain.
Part of the ecosystem
Too complicated compared to newer languages like java. The dynamic scripting languages are even simpler

Also an entry barrier. Young people can take it up if determined, but majority of them are put off. 

There's a minimum mileage required. Many young people don't stay on it long enough. 

My vi mileage is also too short.

In my early days using c++, I tried to set up eclipse CDT and spent lots of time on the tool chain. My goal was to set up similar convenience ... Futile. Not worthwhile. java tools are much better. Most c++ programmers don't bother with such convenience and rely on command line tools.

Similarly, yoga is hard for most people but some individuals are determined and can overcome the initial hump (6-24M) and find joy and reward

--low latency: avoid dynamic data structures
In my first programing job, I used C without malloc, because I used only array + struct. 

If my collection were to grow, then I would have needed DAM. 

I feel low latency generally avoid mid-day DAM. If DAM required, then pre-allocation is preferred.

--GS-HK interviewer said with an array-based order book he could achieve 1 million updates per second.

This is in response to my claim that Rebus is 700K MPS.

Martin Thompson basically said if the performance is good enough for the requirement, then no need to go further.

--microsoft acquired Mono project and produced dotnet core (Sunil) as a jvm challenger to run on non-windows platforms

--java community support is better than c# or c++
higher collective brain power
--cloud: golang and java are the most popular languages
--bigData: java is possibly #1
--ML: java is 2nd or 3rd