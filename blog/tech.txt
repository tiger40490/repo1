-- new or update on signal+socket
signals in windows? not popular

real time signals are a new Posix concept... not really low-latency. 
Low latency sockets don't rely on signals for immediate action

Many signals are self-sent from the same process. I think timer alarm is one example. Sockets is another example. However, keyboard signals like Ctrl-C are not self-sent.

Signal is designed to be asynch, seldom immediate, though the scheduler may preempt whatever is running and give the next time slice to the signal's target process sooner than normal.

One of the most common signals is SIGSEGV. The default signal handler function performs a core dump. There's no process to preempt. However, the current process may not check its signal table until some instructions later, and then run the signal handler.

-- update post on array^ptr
a ptr object can be reseated to point to an array.
An arrayName (is not an object) can't be reseated. It's a compile-time constant.

-- update or new: 2D-array ptr type
If via malloc then we get an int ptr

if declared as static 2D-array, then we get a ptr-to-int-ptr i.e. double ptr
How about a jagged 2D-array? Same double-ptr

how about a shared ptr to a 2D-array? I think it's same as shared_ptr to a 1D array. Note this features is unavailable before c++17. If you initialized a shred_prr with a heap array, the shared_ptr dtor will call delete rather than delete[] on the original ptr :(

-- new: languages with entry barriers to impatient young programmers
In java I was able to GTD for years without knowing a lot. 照猫画虎, 囫囵吞枣
In c++ (C and perl to a lesser extent) the syntax is tricky and nuanced, so we need to know a bit more. Alex of Fenix would probably agree.
In most newer languages, we don't need to know a lot. Therefore, the low-level understanding (my competitive strength) has lower market value.

-- new or update: java: big lambdaEx^methodRef
I think a big lambdaEx (lambda expression) is usually [1] used as an argument to a method. 

Q: can we convert the big lambdaEx to a method reference?
A: not alwaysl. In Dropcopy framework, I realized that 

* many times yes I can and should convert. LambdaEx is designed for small code blocks.
* however, if the lambdaEx uses captured variables, then conversion can be difficult. I think the new method has to add a new param for every captured variable.

[1] There might be other usages, but in this blogpost I can put them aside.

-- fuxi: operator overloading for a python custom class
Possible, but not popular
Define the __add__(self, other) method

-- fuxi: closest ancestors of c/c++
For c++
#1 is C
#2 is Simula

For C, the #1 is the B language. It explains the naming of "C"

-- BitMain
Q: in your java project, is memory an issue?
