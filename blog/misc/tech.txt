--java (and c#) reference (varialbe) is more like pointer than c++ reference
c++ reference can't be reseated. This is the major difference.

--why can't we take the address of c++ reference? 
A pointer is often a runtime object, with an address.

A ref is strictly a variable and never a runtime object, so it has no address.

--new: unspecified^undefined behavior
Some interview questions really really go into UDB, so it is very very useful to understand UnSpecifiedBehavior (USB): 

Compilant compilers are not required to document the behavior but the behavior should be valid such as crash.

UDB gives compilers more freedom. The actual result could be anything.

--new: competitors to x86 instruction sets
Interviewers often focus on x86 instruction sets, but I could point out competing instruction sets.

IBM's PowerPC, Oracle's Sparc, were popular in HighPerformanceComputing. Even if they are less popular now, the still have a presence.

AMD64 (i.e. x86-64) was created at AMD, as an extension on x86

IA-64 was created at HP then Intel, widely deployed in data centers.

If interivew is not 100% focused on server-side, then I would point out ARM is dominant in handheld.

--update blogpost on Optional.java
https://dzone.com/articles/considerations-when-returning-java-8s-optional-from-a-method shows the pitfalls of returning Optional from a method.

I feel this is like borrowing from a loan shark to pay off credit card balance. 

If you are careful, it can help you avoid the NPE of the traditional practice, but if you are undisciplined (like most of us), then this new stragey is even worse -- 

Traditional return type is something like String, but caller has to deal with nulls. New strategy is supposed to remove the risk/doubt of a null return value, but alas, caller still needs to check null first, before checking against empty

--new:
For c++ to hold its ground in the latency benchmarks
* no new no malloc. Use stack and data segment
* no STL no std::string no shared_ptr
* optimize d-cache and i-cache
* use compile-time programming

For java, 
* no GC

--new or update blogpost: advantage of make_shared
* one allocation fewer. I think this is thousands of times slower than a simple calc
* code size is smaller and more i-cache friendly

--threading is a core IV topic in java, but remain a "superstructure" topic in c++, in the form of c++11 thread and pthreads.

I think java threading is simpler and accessible to regular app developers whereas c++ threading remains part of the vast array of advanced topics.

I think my progress in my c++ QQ performance since 2011 was mostly in the core QQ topics. I achieved some thick->thin and critical mass.

--java doesn't give you contorl over memory layout
No struct. (c# is better)
A string object (even as a field) is always a seperate heapy thingy

--really low-latency apps should probably avoid lock-free... Strictly single-threaded mode, strictly. 

--When setting up a new phone (laptop, and outlook are similar), i need to simplify it.
disable many notifications
uninstall many apps
remove all the unsolicited content pushed to me like on maps and social apps

ergonomics, comfort

The more I rely on a device (laptop, linux, printer/scanner, camera..) the more I need to (invest time and) analyze my priorities and preferences.
--py
fuxi: iterable and yield

--new: a data API (for javascript consumers, python consumers, Excel consumers..) can include
smart search
subscription API like server push
streaming API
sorted collection API

(this content is better done via chewing .. in gmail/outlook/git, NOT web blogging)
--new: std::bitset: popular ] WallSt c++coding IV
std::bitset is popular in WallSt c++ coding interviews. Rather easy to use if you are an experienced c++ developer.

to_string() and cvctor from string like like "011100101011010"
to_ulong() and cvctor from ulong
operator[] returns a reference, so you can assign to myBitset[0]. Designed to mimic a raw array on the surface. Actually, return type is not reference to a bool. Rather, I think it's a reference to a specific posiiton in the "backing store". See http://www.cplusplus.com/reference/bitset/bitset/operator[]/

Lowest bit has position 0, becasue bitset is designed to represent a binary integer. To scan from highest bit, we must iterate from bitset[size()-1] to bitset[0].

--new
When an order is sent directly to NYSE, NYSE could decide to route it to BATS-Y which fills it. I guess the fill report should probably show 30=BATY

liquidity indicator might show 3 (routed out)

--new: iphone explosure due to overcharge overnight
apple hotline told me that there is builtin protection for overheating.

If it's a genuine iphone without damage or tamper, then it won't explode. If it does, it's a defect. What we see on video footage could be fake. 

Before a phone explodes due to overcharge, there would be signs of unusual heating.

--new:
Half of the major new language features are designed for the std library developers.
The unspoken assumption -- these features are equally useful to other library developers.

The follow-up assumption -- app developers also need to use some (and understand all) of the nitty-gritty details.

In reality, not relevant to GTD for app developers.
--new: price discovery and closing auction
An exchange provides the (nearly) ideal venue for price discovery, but in reality the fragmentation of liquidity makes price discovery non-trivial even on a large exchange like NYSE.

Luckily, the closing auction remains a centralized process. Even though a stock symbol can be traded on multiple exchanges beside the primary listing exchange, auction orders are always sent to the primary listing exchange.

--fuxi: mlphone bb app settings
in any bb app, hit the bb icon at bottom right -> hit gear icon on bottom left -> per-app settings

--sugg: q[ nn ] and q[ commit --amend ] both to detect the current HEAD is also origin/.... Use commit hook

--fuxi: cpu set seems to be a linux feature, not just a container feature

--new: cpu affinity
sched_setaffinity is a syscall!
all other *affinity* functions are based thereon

*_np in function name means non-portable

Need to read more. Similar to socket QQ -- Not deep, but even more academic than socket

--new:
is malloc a kernel service, syscall or a userland function offered in a regular library?

Can I implement my own DAM without involving the kernel?

--Martin's low-latency java talk
Deallocation is worse than allocation. Deallocation may use locking if performed across threads.

My Questions
Q: for low latency should we avoid concurrency ?
A: yes
%%A: parallel processing in ST-Mode is good but avoid any form of synchronization 

Q: If I don’t use heap, and only use stack and static memory….?
A: heap allows sharing between threads

Q: why is JIT not available to c++?

--pointer as a field of a class is uninitialized by default
I think Ashish's test shows it

However, such a field creates an opportunity for mv-ctor. The referent object is usually on heap on in static memory

--fuxi: Q: why unlike java/c#, in my c++ jobs I seldom needed to learn ide? 
(I used msvs only for automated build since windows command line build is based on msvs.)

in my java jobs, i often need to spend lots of time learning the ide features.

A: c++ IDE is less effective less value-adding more complicated. Majority of c++ developers actually don't use any IDE. 

--new: 
one of the most obvious and real limitation/obsolete features of c++ as a language is the tool chain.
Part of the ecosystem
Too complicated compared to newer languages like java. The dynamic scripting languages are even simpler

Also an entry barrier. Young people can take it up if determined, but majority of them are put off. 

There's a minimum mileage required. Many young people don't stay on it long enough. 

My vi mileage is also too short.

In my early days using c++, I tried to set up eclipse CDT and spent lots of time on the tool chain. My goal was to set up similar convenience ... Futile. Not worthwhile. java tools are much better. Most c++ programmers don't bother with such convenience and rely on command line tools.

Similarly, yoga is hard for most people but some individuals are determined and can overcome the initial hump (6-24M) and find joy and reward

--new: low latency: avoid dynamic data structures
RTS uses no STL containers.

In my first programing job, I used C without malloc, because I used only array + struct. If my collection were to grow, then I would have needed DAM. 

I feel low latency generally avoid mid-day DAM. If DAM required, then pre-allocation is preferred.

--GS-HK interviewer said with an array-based order book he could achieve 1 million updates per second.

This is in response to my claim that Rebus is 700K MPS, which is not far behind. No shame -- 
Martin Thompson basically said if the performance is good enough for the requirement, then no need to go further.

--new: bcomp advantage over git-diff
* shows byte count in new vs old versions, useful in git blogging intra moves
* can hide minor changes
* shows char-level changes -- hard to see in git-diff

--fuxi: C continues to dominates in system programming
low-latency
sys calls
socket programming
pthreads

--fuxi: microsoft acquired Mono project and produced dotnet core (Sunil) as a jvm challenger to run on non-windows platforms

--fuxi: java community support is better than c# or c++
higher collective brain power
