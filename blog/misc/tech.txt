--new blogpost: pagination query 
What SQL query can support pagination? Suppose each record is an "article".

I think each article has an id maintained in the database table. First page, say latest 10 articles, is sent to browser. The "fetch-next" command from browser would have the last id received. When this command hits the server, should it return the next 10 (AA), or (BB) should it check the new latest articles? I prefer AA. BB can wait until user refreshes the page.

The SQL:2008 standard supports both (XX) top-N feature and (YY) offset feature, but for various reasons, only XX is recommended :

select * from Articles where id < lastFetchedId fetch first 10

use-the-index-luke.com explains that the "seek" method is superior to the "offset" method. 

--new blogpost:
Tower interviewer asked me to elaborate why I claim java is a very clean language compared to c++ (and c#).

I gave the example of q[=]. In java, this is either content update (for primitive data types) or pointer reseat (for reference types). No ifs or buts.

In c++ q[=] can invoke the copy ctor, move ctor, copy assignment, move assignment, conversion ctor, conversion operator. Its meaning is special for a reference variable in initilization vs update

--new blogpost: assignment^rebind across languages 
for a non-primitive variable, java assignment is always rebinding. Java behavior is well-understood and simple, compared to python.

c++ assignment is actually well-documented .. comparable to a mutator method

python assignment is always rebinding afaik, even for an int. Integer is an immutable object, reference counted.

In python, if you want two functions to share a single mutable integer variable, you can declare a global int. 
It would be in the global idic/namespace

Alternatively, you can wrap the int in a single-element list and call list mutator methods.

See my experiment in github py/88lang

--no blogpost
adding "const" can lead to bewildering template errors that don't show any relation to const

--no blogpost
# You can put python function body and header on same line :)
def packed(haystack):  return ''.join(haystack.split())
