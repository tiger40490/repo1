--does data center rack space always mean cloud?
Two major sectors:
* financial companies generally use private data centers, probably not cloud
* web sites generally use the cloud

The rest are unfamiliar to me.

--fuxi but no point publishing:
To find a windows service name

  sc query > some.log

To fine the pid of the service name

  sc queryex WinDefend

  taskkill /F /PID 4168
  
--fuxi
Now I realize BFT is by level i.e. visit order is root to leaf. DFT is bottom-up

--fuxi pre-order and post-order walk can appy to k-ary trees
pre-order means print myself first before my children

post-order means print myself last.

--udpate blogpost
gmail : alt-shift-5 for strike-through

--new untitled
95G offer service used tibrv to send updates to GUI. Robust and fast

Also there was one daemon instance for each trading account. Sounds inefficient but actually acceptable scalability.

--new: price^value of various smartphones
price of smartphone depends on
* branding
* component cost such as processor speed, RAM size, screen size, battery capacity
* Is reliability a factor? Not directly. Perhaps the brand and components have an indirect effect

My requirements ("value") are
1. reliability
2. screen size
3. battery

--new: 
In the json loader project, when I refactored an overgrown method, I often extracted part of it into a “delegate” method or a helper method.

This delegate method is invoked only from the original method. It can have the same method name, same signatures, sometimes in the same or another file.

The identical name between both methods is a tell-tale sign of their relationship.

If the original method thus becomes very simple, then we refer to it as a wrapper. 

A more common extraction procedure creates a reusable routine that’s invoked from multiple places -- DRY
--
Impact cache updates -- can use IP multicast?

--update blogpost on clone()
clone() is needed for immutable design, a hot topic for core java IV. 
However, clone() is not well known or well quizzed

clone() is far more obscure than c++ copy ctor

ImmutableComposite can have field objects that are mutable types iFF they are clonable.

--fuxi:
Citrix became very slow when I moved to a location far from the wifi hotspot. I could see the signal strength dropping very low.

--fuxi: JVM remote debugging is not so foolproof.
GDB is not so foolproof. See my blogposts.

We need to fully embrace the reality that live debugging is often impractical.

In contrast, "echo" is the gold standard in code tracing.

--fuxi: 5GHz ^ 2.4GHz wifi
Range favors lower frequency. Bigger homes may need it.

bandwidth favors higher frequency. Video streaming.

Overcrowding in 2.4 can cause intermittent connectivity issues, but is it 5% of the time or 0.05% of the time? Not sure. Microwave did hit me.

-- clone() is needed mostly in one context -- immutable composite class
This topic is relevant in QQ IV.

If you design a composite class (ImmComp) to be immutable, where some field is of type CC, then you need to clone each CC object received or returned from ImmComp. Remember the 2010 Citi muni interview.

Aha -- if ImmComp can be refactored to hold primitve/string fields of CC rather than a CC field, then things are simpler. CC needs no clone() 
Aha -- if CC is already an immutable class then things are simpler. We probably don't need clone()

Warning: CC could be the root of an object graph such as a tree. When we clone CC and CC contains a field of type DD, then a mutable DD would be part of CC's object state, and also ImmComp's object state. Any change to DD would break immutability of ImmComp :(

-- new: stop/suspend/resume/destroy in java
Occassional IV question

These four methods are still part of the API and stop/suspend/resume are implemented and available. (destroy() is never implemented.) They are all unsafe most for two reasons

1) suspend() forces the thread to suspend without releasing locks if any. Susceptible to deadlock. The resume() method is used with suspend().
2) stop() forces the thread to die and release all locks. No deadlock risk AFAIK, but if the thread was forced to release a lock, then the lock is likely needed to protect some object state (such as fund transfer). Force-Release of the lock would expose those object's invalidate state.

-- to start excel with a spreadsheet file, i can run this command from git-bash:

$ start excel assets\{git.xls

--fuxi: hasSameContent(dict1, dict2): return dict1 == dict2 

--new or update:
multi-threading as a skill is all about shared mutable -- improving performance in the presence of shared mutables. However, low latency avoids shared mutables.

Low latency on a multi-core machine would probably use many threads in STM

See Doug Lea for a broader perspective

--fuxi: mlphone bb app settings
in any bb app, hit the bb icon at bottom right -> hit gear icon on bottom left -> per-app settings

--fuxi: cpu set seems to be a linux kernel feature, not just a container feature

--new:
is malloc a kernel service, syscall or a userland function offered in a regular library?

Can I implement my own DAM without involving the kernel? I would say some kernel sys call is needed.

Is there a cpu instruction for heap allocation? Does cpu care about heap vs stack?

--fuxi: Martin's low-latency java talk
java has no deallocation cost. C++ deallocation is worse than allocation. Deallocation may use locking if performed across threads.

My Questions
Q: for low latency should we avoid concurrency ?
A: yes
%%A: parallel processing in ST-Mode is good but avoid any form of synchronization 

Q: If I don’t use heap, and only use stack and static memory….?
A: heap allows sharing between threads

Q: why is JIT not available to c++?
%%A: c was not designed for JIT and ineffective 

