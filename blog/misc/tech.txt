--low latency: avoid dynamic data structures
In my first programing job, I used C without malloc, because I used only array + struct. 

If my collection were to grow, then I would need DAM. 

I feel low latency generally avoid DAM. If DAM required, then pre-allocation is preferred.

--GS-HK interviewer said with an array-based order book he could achieve 1 million updates per second.

This is in response to my claim that Rebus is 700K MPS.

Martin Thompson basically said if the software is good enough for the requirement, then no need to go further.

--Q: perf: is heap similar to stack
I quote Martin out of context -- After allocation, "the speed of using the heap is just like the stack".

I feel there's a difference in terms of data cache.

Objects on the stack are physically clusttered, so presumably CPU can cache them more easily. I know this works with arrays, but not sure about disconnected objects living on a single stack frame
 
--array is the most important data structure
C supports only array (horizontal) and struct (vertical). I feel most standard libraries across languages are designed based on the same. Array + graph are about the only data structures in those libraries and in CIV.

For comp science research, there's more energy focused on array than any other data structure.

Array (among various data structures) is the real focus of micro tuning and hardware optimizations.

--microsoft acquired Mono project and produced dotnet core to run on non-windows platforms

--Azul jvm has optimized GC
--java community support is better than c# or c++
--cloud: golang and java are the most popular languages

--bigData: java is dominant
--ML (data science): python and c++ are the top 2 languages

--github:
writing and experimenting a simple semi-smart pointer is a good xx xp
Read safeC++
