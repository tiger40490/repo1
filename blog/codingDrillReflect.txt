--new: Many non-optimal solutions are worthwhile.

Some of them offer insight into the problems, in terms of structure, constraints...
Some of them are non-optimal but break down the original problem into smaller, familiar problems.
Some of them are non-optimal but offer reusable techniques
Some of them are non-optimal but very short and clever
Some of them (my homemade) are non-optimal but unique and innovative ... worthwhile achievements.
Some of them are non-optimal but good enough for "2nd-tier" coding interviews...i.e. less-demanding

Q: your real goals, motivations for coding drill? Absorbency? Burning pleasure? Satisfaction (as Rahul puts it)? Maintaining a 
hobby?
So defocus can help. The focus on "optimal" creates negativity.

--no publish: After 100 problems, it's harder to sustain the practice
Intuitively, subconsciously we experience the same diminishing return

--no:
A student's approach to statistics is different from a mathematician's. Likewise, I feel the intern way of coding drill is not good for me
* not long-term commitment. I believe most of them would stop after getting a job.
* not in-depth
* not aimed at deep learning and retention
* more like cram

However an unbiased interviewer/observer could find the student stronger than me.

--
I think some coding problems are perceived similar to basic java knowledge. A self-respecting coder is expected to know all the "easy" problems.

As such, we need memory refresh ..

--new blogpost cod`drill outlasting C++self-study
Am confident that my coding drill will become a "long-term" hobby like java/c++ QQ, better than c#/quant/swing QQ. 

Anti-aging.

Enjoyable? Yes possible and real if no pressure. 

Not theoretical; more immediate result

I think coding drill may even outlast c++ QQ self-study but crucially my c++ QQ has reached critical mass.

--no blogpost:
Q: how could I grow my ranking in coding test as I did in java/c++ QQ?

Need to prioritize 1 or 2 among the formats as described in google sheet. 
Leave out speed coding and weekend assignments. (This doesn't mean we give up on those fronts.) It means I accept my limitations as an aging developer.
