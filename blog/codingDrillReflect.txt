--new 1% frontier; 99% revisit 
Now I think it's OK to spend most of my coding drill on revisit of old problems.
Many problems are half-solved.

-- what assitance can sweeten the coding drill?
books like [[algorithm]]
print-out of my blogposts
sunshine + patience
refresh past questions -- a lot to learn
refresh algoQQ
classify blogposts
chip away on enroute etc

--new: 
maxProfit solutions are not simple not easy to understand. These solutions often are reusable and require a lot of digestion and internalization

* watermark
* Kadane
* scan from both ends
* DP #Qihao

--new: counting sort^suffix array
Counting sort is so simple that most books don't go in depth, but counting sort is a favorite in CIV !

Similarly, we have the sliding window, two-pointer..

Suffix array is very powerful and relatively simple, but not popular in CIV. Trie is popular, in contrast.

This reveals something about the CIV culture.

--Morse experience
Given a tough problem, I can either solve it myself over a few days or read the std solution. 

I learn more by working out my (non-optimal) solutions.
More laser
More engagement
More absorbency -> self-esteem
More mileage acquired

--email to XR: my non-monetary motivation is not lower than the salary-oriented motivation

I now recall that most of my friends who practice heavily on leetcode have a clear goal to increase salary.

If their salary-oriented motivation is at level 8 on a scale of 1 to 10, then my level was like 5. Now it's at 5.5 because I feel the prospect of getting a job offer like $250k is more realistic.

However, the level of my motivation was not low for the past year. I think it was just as high as my friends. Motivation is a complex thing so I will just point out a few elements
* I am motivated by achievements like solving a tough problem by myself. Incompatible with the salary-motivation
* With 50% of my problems, there are solutions posted but I refuse to look at them. I enjoyed my blissful ignorance. I liked my own solutions
* I enjoyed some problems outside Leetcode

I think the common theme among these factors is -- salary motivation dilutes many little joys of coding drill.

I'm not doing this drill just for self-improvement. I do it to keep myself relevant to the economy.


--
I still want to practice on the harder problems, as they do show up in some interviews.
====
some people spend too little time on the motivation analysis, but I tend to spend too much time.
Perhaps I should just do it
--update blogpost...
In terms of long-term orgro, QQ study feels slightly better than coding drill.
Therefore, I prefer to focus on insight into the structure/constraints of each problem, and hope for better retention.

Compared to QQ study, coding drill keeps me younger and more relevant to the new crop of programmers and jobs

--add to blogpost on satisfaction
After such heavy leetcode practice, do I feel satisfied? Deeply satisfied? How long will it last?

Am I more confident after solving many problems on my own? I would say yes

--email
In 1999, at the height of the dotcom bubble, a fellow programmer described to me the hiring standard at some dotcom shops like "If you can write some simple programs, then you are hired."

I feel the leetcode style interview is now similar. The hiring criteria is geared towards fresh graduates. Even for experienced hires, the emphasis appears mostly on language-agnostic algorithms and data structures. No advanced language knowledge required. No SQL, no OS knowledge, no network protocol, no system automation (scripting) required.

Command line utilities is another example -- a practical skill important in linux/unix work environments, frequently quizzed in Wall St interviews. Not all fresh graduates have this experience, and some experienced hires don't use them either, so this skill is not required in west coast interviews.

I feel this type of screening and this level of salary is a sign of bubble. 
