[e=ez]
[c=classic]
* SIG movie search in STL
* [c e] binary tree serialization #Deepak's solution
* [c e ] insertion sort
* [c !e] next split@N boys
* [c !e str] longest palindrome subsequence
* [c str] regex parser with q(?)
* [c graph] find cycle in graph
* [c e tree] given 2 nodes in a tree, find the lowest common ancestor.
* [2D] Given a boolean matrix mat[M][N] of size M X N, modify it such that if a matrix cell mat[i][j] is 1 then make all the cells of ith row and jth column as 1.
--[2D] Given a n*n matrix where all numbers are distinct, find the maximum length path (starting from any cell) such that all cells along the path are in increasing order with a difference of 1.
* We can move in 4 directions from a given cell (i, j), i.e., we can move to (i+1, j) or (i, j+1) or (i-1, j) or (i, j-1) with the condition that the adjacent cells have a difference of 1.

Example:

Input: mat[][] = {{1, 2, 9}
{5, 3, 8}
{4, 6, 7}}
Output: 4
The longest path is 6-7-8-9.
